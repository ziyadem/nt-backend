<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>DEV Community</title>
    <description>The most recent home feed on DEV Community.</description>
    <link>https://dev.to</link>
    <atom:link rel="self" type="application/rss+xml" href="https://dev.to/feed"/>
    <language>en</language>
    <item>
      <title>Coding a Port Scanner with Python</title>
      <dc:creator>James N.</dc:creator>
      <pubDate>Tue, 04 Apr 2023 05:34:51 +0000</pubDate>
      <link>https://dev.to/jsquared/coding-a-port-scanner-with-python-5he7</link>
      <guid>https://dev.to/jsquared/coding-a-port-scanner-with-python-5he7</guid>
      <description>&lt;p&gt;Port scanning is a way for determining which ports on a network device are open, whether it's a server, a router, or a regular machine. To simply put it, a port scanner is just a script or a program that is designed to probe a host for open ports.&lt;/p&gt;

&lt;p&gt;In this blog, I will show you step-by-step how to code a simple port scanner using the pre-installed socket library. The idea of making the port scanner is to connect to a host (it could be a website, server, or any device which is connected to a network/ internet) through a list of ports. If the scanner establishes a connection, then that means the port is open. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER: THIS IS ONLY FOR EDUCATIONAL PURPOSES ONLY. DO NOT USE THIS ON A HOST THAT YOU DO NOT HAVE PERMISSION TO TEST. PORT SCANNING IS NOT ILLEGAL UNLESS IT IS USED TO GAIN UNAUTHORIZED ACCESS OR BREACH PRIVACY.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First things first, if you want to print in colors, you will need to install colorama (this is completely optional):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip 3 install colorama
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that out of the way, now we can actually start coding the scanner. First, let's import the &lt;code&gt;socket&lt;/code&gt; module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import socket # for connecting to the host 
from colorama import init, Fore

# adding some colors (optional)
init()
GREEN = Fore.GREEN
RESET = Fore.RESET
GRAY = Fore.LIGHTBLACK_EX

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;strong&gt;The socket module is a module already built in the Python standard library, so you don't need to install it.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;colorama&lt;/code&gt; is used later when the program prints the ports that are open or closed (again this is optional) &lt;/p&gt;

&lt;p&gt;Next, let's create a function that will be used to decide whether a port is open or not:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def is_port_open(host, port):

    #determines whether the host has the port open
    # creates a new socket
    s = socket.socket()
    try:
        # tries to connect to host using that port
        s.connect((host, port))
        # make a timeout if you want it a little faster (means less accuracy)
        # s.settimeout(0.2) &amp;lt;-- if you want to add a timeout 
    except:
        # cannot connect (port is closed) and returns false 
        return False
    else:
        # the connection is established (port is open)
        return True

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the &lt;code&gt;s.connect((host,port))&lt;/code&gt; function attempts to connect the socket to a remote address using the &lt;code&gt;(host,port)&lt;/code&gt; tuple (Tuples are used to store multiple items in a single variable), it will bring up an exception when it fails to connect to the host, so that is why we put that code into a try-expcept block so when the exception is brought up, it tells us that the port is closed (otherwise it is open). &lt;/p&gt;

&lt;p&gt;Lastly, we can use the function we just made above and repeat it over a number of ports:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# asks user to enter a port 
host = input("Enter the host:")
# repeat over ports, from 1 to 1024
for port in range(1, 1024):
    if is_port_open(host, port):
        print(f"{GREEN}[+] {host}:{port} is open      {RESET}")   #prints green text for open ports 
    else:
        print(f"{GRAY}[!] {host}:{port} is closed    {RESET}", end="\r") #prints gray text for closed ports 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This part of the code will scan all ports from 1 to 1024. You can freely change the range if you so choose, but keep in mind that if you increase the range it will take longer to complete scanning. &lt;/p&gt;

&lt;h2&gt;
  
  
  Potential Issues
&lt;/h2&gt;

&lt;p&gt;Upon running the code, you will notice that the script isn't the fastest. You can change this by adding a timeout of 200 milliseconds (using &lt;code&gt;settimeout(0.2)&lt;/code&gt;. Keep in mind that this will reduce the accuracy of the scanning, especially if you have high latency. &lt;/p&gt;

&lt;p&gt;If you want, the full source code is on &lt;a href="https://github.com/sleepyrob0t/simple-portscanner-python"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ethicalhacking</category>
      <category>security</category>
      <category>cybersecurity</category>
      <category>penetrationtesting</category>
    </item>
    <item>
      <title>How to use .NET's built-in caching mechanism to improve the performance of your web applications</title>
      <dc:creator>Bhavin Moradiya</dc:creator>
      <pubDate>Tue, 04 Apr 2023 05:28:48 +0000</pubDate>
      <link>https://dev.to/bhavin9920/how-to-use-nets-built-in-caching-mechanism-to-improve-the-performance-of-your-web-applications-55o</link>
      <guid>https://dev.to/bhavin9920/how-to-use-nets-built-in-caching-mechanism-to-improve-the-performance-of-your-web-applications-55o</guid>
      <description>&lt;p&gt;Caching is a crucial technique for improving the performance of web applications. By caching frequently accessed data in memory, you can reduce the number of database queries and other expensive operations your application needs to perform, leading to faster response times and better scalability.&lt;/p&gt;

&lt;p&gt;In .NET, the caching mechanism is built into the framework, making it easy to implement and customize. Here are some tips for using .NET's caching features to improve your application's performance:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Use the MemoryCache class&lt;/strong&gt; :&lt;br&gt;
.NET's built-in caching mechanism is based on the MemoryCache class, which allows you to store data in memory for quick access. To use the MemoryCache class, you can create a new instance of it in your application and use the Add() and Get() methods to add and retrieve data from the cache, respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var cache = MemoryCache.Default;
var key = "myCachedData";
var data = cache.Get(key) as List&amp;lt;MyData&amp;gt;;

if (data == null)
{
    // If the data isn't in the cache, query the database and store the results in the cache
    data = db.Query&amp;lt;MyData&amp;gt;("SELECT * FROM MyData").ToList();
    cache.Add(key, data, DateTimeOffset.Now.AddMinutes(10));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, we're using the MemoryCache class to cache the results of a database query for 10 minutes. If the data is already in the cache, we retrieve it using the Get() method. If not, we query the database and store the results in the cache using the Add() method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Use caching for expensive operations&lt;/strong&gt; :&lt;br&gt;
Caching is most effective when used for expensive operations that are performed frequently. For example, if you have a page that displays a list of products and the list rarely changes, you could cache the product data to improve the page's performance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.Set a reasonable expiration time&lt;/strong&gt; :&lt;br&gt;
When you add data to the cache, you can specify an expiration time to ensure that the data is automatically removed from the cache after a certain period. It's important to set a reasonable expiration time based on how frequently the data changes and how important it is to have the most up-to-date information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.Monitor cache performance&lt;/strong&gt; :&lt;br&gt;
Like any performance optimization, it's important to monitor the performance of your caching strategy to ensure that it's actually improving your application's performance. You can use tools like PerfView to measure the impact of caching on your application's CPU and memory usage.&lt;/p&gt;

&lt;p&gt;Caching is a powerful technique for improving the performance of web applications, and .NET's built-in caching mechanism makes it easy to implement and customize. By using caching for expensive operations and setting reasonable expiration times, you can reduce the load on your database and other resources, leading to faster response times and better scalability.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>aspdotnet</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>memory GAME NEW FEATURE</title>
      <dc:creator>nagvanshi9275</dc:creator>
      <pubDate>Tue, 04 Apr 2023 05:03:25 +0000</pubDate>
      <link>https://dev.to/nagvanshi9275/memory-game-new-feature-3c0e</link>
      <guid>https://dev.to/nagvanshi9275/memory-game-new-feature-3c0e</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Ashish-Nagvanshi/embed/jOvgoVE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>A Detailed Guide on How to Build a Website with Next.js and Headless WordPress + SEO - 2023 Web Development</title>
      <dc:creator>Jeffrey Nwankwo</dc:creator>
      <pubDate>Tue, 04 Apr 2023 04:39:20 +0000</pubDate>
      <link>https://dev.to/jeffsalive/a-detailed-guide-on-how-to-build-a-website-with-nextjs-and-headless-wordpress-seo-2023-web-development-4nof</link>
      <guid>https://dev.to/jeffsalive/a-detailed-guide-on-how-to-build-a-website-with-nextjs-and-headless-wordpress-seo-2023-web-development-4nof</guid>
      <description>&lt;p&gt;If you haven't heard about Next.js and WordPress, don't worry - you can check out the links I've included to learn more about them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wordpress.org/"&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we'll together be exploring the power of combining &lt;strong&gt;Headless WordPress&lt;/strong&gt; and &lt;strong&gt;Next.js&lt;/strong&gt;, two technologies that have become increasingly popular in recent years. By using these together, we can create a website that is not only incredibly fast, but also SEO-friendly and provides an exceptional user experience. This guide is perfect for both experienced developers and those who are just starting out, as I'll be providing all the necessary knowledge and tools to help you create cutting-edge websites in 2023.&lt;/p&gt;

&lt;p&gt;Throughout this post, I'll be working on building a simple blog using Next.js and Headless WordPress. You can check out the finished product at the link provided, and the code can be found in the GitHub repository.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs-headless-wordpress-lac.vercel.app/"&gt;Finished Product&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JeffreyChix/nextjs-headless-wordpress"&gt;GitHub Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While WordPress is a well-known content management system, not everyone is familiar with Headless WordPress - I'll be covering what it is and why it's important.&lt;/p&gt;

&lt;h2&gt;
  
  
  What is Headless WordPress?
&lt;/h2&gt;

&lt;p&gt;In traditional WordPress setups, the content management system (CMS) and frontend are closely tied together (tightly coupled). Essentially, WordPress handles both the content management and presentation aspects of user interactions. However, with Headless WordPress, we've got a new way of using the platform that separates the CMS from the frontend presentation layers. This approach allows us developers to use the CMS as a content repository, similar to a backend, and use the provided API to fetch content as needed on the frontend. The best part is that we're no longer limited to using WordPress for the frontend, but can choose any technology we prefer, like React, Vue.js, Angular, or in our case, Next.js.&lt;/p&gt;

&lt;p&gt;What about the benefits? Well, they are pretty amazing. As developers, this technology gives us the power to build applications with greater flexibility, improved performance, and better separation of concerns between the CMS and frontend. We can build custom, high-performance front-ends while still leveraging the powerful content management capabilities of WordPress.&lt;/p&gt;




&lt;p&gt;In this setup, here are some of the things we will cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next.js setup with TypeScript.&lt;/li&gt;
&lt;li&gt;WordPress setup on Local by Flywheel, which will enable us establish a server for WordPress installation. WordPress installation. You may also utilize XAMPP, WAMP, or any other familiar tool.&lt;/li&gt;
&lt;li&gt;Downloading and configuring plugins.&lt;/li&gt;
&lt;li&gt;Connecting our WordPress and building our blog.&lt;/li&gt;
&lt;li&gt;Deploying our blog.&lt;/li&gt;
&lt;li&gt;Optimizing blog for SEO. (A live url is necessary).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Are you game? Let's begin!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Next.js setup with TypeScript
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Option 1 (Recommended)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want to join me or already know about this, you can grab the starter template I made on GitHub. It's got useful stuff like React components and project styling. Just run &lt;code&gt;npm install&lt;/code&gt; or &lt;code&gt;yarn install&lt;/code&gt; to install the dependencies. Here's the link to the starter template: &lt;a href="https://github.com/JeffreyChix/Headless-WordPress-Nextjs-Starter-Template"&gt;Grab it here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Option 2&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But if you prefer to go the extra mile and set up Next.js with TypeScript on your own, keep reading.&lt;/p&gt;

&lt;p&gt;To begin, create a new folder for this project on your desktop or any location you prefer. I called mine "the-headless-blog". 🧐&lt;/p&gt;

&lt;p&gt;The fastest way to start a Next.js project with TypeScript is to use the &lt;code&gt;npx create-next-app&lt;/code&gt; command with the &lt;code&gt;--typescript&lt;/code&gt; flag. Open your project folder in your favorite IDE and run this command on the terminal: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx create-next-app@latest --typescript&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;You'll be prompted to answer some questions about your project confiuration. To follow along, here are the options I chose:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What is your project named? - . (".", specifying to use my folder name as the project name. You can enter a name of your choice)&lt;/li&gt;
&lt;li&gt;Would you like to use ESLint with this project? - Yes&lt;/li&gt;
&lt;li&gt;Would you like to use &lt;code&gt;src/&lt;/code&gt; directory with this project? - No&lt;/li&gt;
&lt;li&gt;Would you like to use experimental &lt;code&gt;app/&lt;/code&gt; directory with this project? - No&lt;/li&gt;
&lt;li&gt;What import alias would you like configured? - @/*&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's keep it moving.&lt;/p&gt;

&lt;h2&gt;
  
  
  WordPress Installation and Setup on Local
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Feel free to skip this part.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Local by Flywheel is an effortless way to develop WordPress sites locally. It's quite similar to tools like XAMPP and WAMP but it's my go-to for setting up WordPress locally. You can learn more and download &lt;a href="https://localwp.com/"&gt;here&lt;/a&gt; and it's free.&lt;/p&gt;

&lt;p&gt;To begin creating a new site, open Local by Flywheel, navigate to the green plus icon located at the bottom left of the window. Clicking on it will prompt you to select an option for creating a new site. Choose the "Create a new site" option and click on continue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aMj8-4R6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1sg4zd7s1r1yezfn738.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aMj8-4R6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1sg4zd7s1r1yezfn738.png" alt="Image description" width="880" height="605"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After this, you will be taken to a new screen where you can enter a name for your site. Simply type in any name you prefer and click on the continue button.&lt;/p&gt;

&lt;p&gt;You will then be given the option to select an environment. Generally, the preferred option should suffice, but if you wish to customize your environment, select the "Custom" option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJ1rkxWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kymi3kd9xknxebk93f2n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJ1rkxWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kymi3kd9xknxebk93f2n.png" alt="Image description" width="880" height="572"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step is to enter your WordPress credentials, which include a username, password, and email address. Once you have entered these, click on the "Add site" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dbdwx4VV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1l56k227kja4q0ou55g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dbdwx4VV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1l56k227kja4q0ou55g.png" alt="Image description" width="880" height="559"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Allow some time for the site to deploy and once the process is complete, click on the "Start site" button if it hasn't already started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jrraFURS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6a40pqf85e9m8lr7lwl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jrraFURS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6a40pqf85e9m8lr7lwl.png" alt="Image description" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPUALQpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nywdhwkqid21jpzqqt61.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPUALQpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nywdhwkqid21jpzqqt61.png" alt="Image description" width="880" height="551"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To access the WordPress dashboard, click on the "WP Admin" button and log in using the credentials you created earlier. Congratulations! Your WordPress installation is now complete.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s2UDgZWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jr9mjar5ee8ipazetpu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s2UDgZWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jr9mjar5ee8ipazetpu.png" alt="WordPress Dashboard" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Downloading and Configuring Plugins
&lt;/h2&gt;

&lt;p&gt;Recall that our plan is to use WordPress as a content respository only and then fetch content through APIs. By default, WordPress offers a basic &lt;a href="https://www.redhat.com/en/topics/api/what-is-a-rest-api"&gt;REST API&lt;/a&gt; for retrieving and managing content and data. However, in this project, we will use the &lt;strong&gt;WPGraphQL&lt;/strong&gt; plugin to enhance performance and align with personal preferences.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WPGraphQL: This is an open-source and free WordPress plugin that offers a user-friendly GraphQL API for your WordPress website. Rather than utilizing the standard WordPress REST API, we'll be using GraphQL, a query language for APIs that Facebook developed. It allows you to request only the data you require from an API, increasing the speed and efficiency of your applications. With the help of the plugin, we will be able to retrieve data from WordPress using GraphQL queries. &lt;a href="https://graphql.org/"&gt;Click here&lt;/a&gt; to learn more about the GraphQL query language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install, navigate to the plugins directory on your WordPress dashboard, and search for "graphql." Proceed to install and activate the WPGraphQL plugin. As of the time of writing, it boasts over 20,000 active installations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46hHUsx4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rhc8huqxehs3exxh58j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46hHUsx4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rhc8huqxehs3exxh58j.png" alt="Image description" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's pause a minute to generate at least three to five dummy posts in WordPress. Each post should include a title, a featured image, and an excerpt. We will retrieve these posts on our frontend at a later stage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zqzMfh_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/462cb93axiaggpnklsxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zqzMfh_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/462cb93axiaggpnklsxg.png" alt="Dummy posts" width="880" height="272"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Connecting our WordPress and building our blog
&lt;/h2&gt;

&lt;p&gt;In the Next.js setup section, I added a link to grab the starter template, &lt;a href="https://github.com/JeffreyChix/Headless-WordPress-Nextjs-Starter-Template"&gt;here&lt;/a&gt;. The starter template includes useful code for the React components and styling that I'll be using, and I've also integrated &lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt; to reduce the amount of CSS code you need to write.&lt;/p&gt;

&lt;p&gt;I'll be mostly focused on getting our project connected to WordPress, pulling posts from there, and displaying them on the screen. After that, I'll dive into the SEO stuff.&lt;/p&gt;

&lt;p&gt;To link WordPress to our project, go to your WordPress dashboard. If you've installed and activated the WPGraphQL plugin, it should now show up on the dashboard with a label that says "GraphQL". Click on it and go to the GraphQL settings page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dwE91U7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8fpqcwpsnil0zdr01vn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dwE91U7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8fpqcwpsnil0zdr01vn.png" alt="GraphQL Settings Page" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the "WPGraphQL General Settings" page in the settings, you'll find the GraphQL Endpoint we need to connect WordPress to our project. This endpoint allows us to communicate with WordPress from the frontend and fetch content as required. Simply copy the endpoint, which should look like a URL beginning with either http or https.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7wwNP3b3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19ajf197238v96pakat9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7wwNP3b3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19ajf197238v96pakat9.png" alt="WpGraphQL endpoint" width="880" height="146"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Back in our project folder, create a &lt;code&gt;.env&lt;/code&gt; file in the main directory. It's a file used to store environment variables such as API keys, database credentials or the endpoint we just copied.&lt;/p&gt;

&lt;p&gt;Once the file is created, add a key for the endpoint and save the file. You can name it &lt;code&gt;NEXT_PUBLIC_WORDPRESS_API_ENDPOINT&lt;/code&gt;. Whatever you name it, be sure it starts with "NEXT_PUBLIC_".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PxISb8x_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mrtm1uskzfqjq96rh2xh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PxISb8x_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mrtm1uskzfqjq96rh2xh.png" alt=".env file" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, let's create a new folder in the main directory and name it "lib". Inside this folder, create two new files: base.ts and service.ts. Copy and paste the following code into the base.ts file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_WORDPRESS_API_ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;variables&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;API_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed to fetch API&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the base.ts file, we are exporting the fetchAPI function which is used to fetch data from the WordPress endpoint we stored in the .env file. We can pass a &lt;code&gt;query&lt;/code&gt; string and a &lt;code&gt;variables&lt;/code&gt; object to it to make a request to the endpoint and retrieve the desired data.&lt;/p&gt;

&lt;p&gt;Now let's proceed to write the query to fetch all blog posts from WordPress.&lt;/p&gt;

&lt;p&gt;In your WordPress dashboard, navigate to the GraphQL IDE. The IDE allows us to experiment with GraphQL queries and see the structure of the data that is returned. This can help you understand how to structure your queries and align the data with the needs of your application. Click on the "Query Composer" button to open the composer. With the composer, you can create GraphQL queries by toggling the relevant data types and their available options. To learn more about making queries in WPGraphQL, you can refer to this &lt;a href="https://www.wpgraphql.com/docs/posts-and-pages"&gt;resource&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since we want to fetch posts, here's the query to fetch the first a number of blog posts from WordPress:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;query FetchPosts($first: Int = 10) {
  posts(first: $first) {
    nodes {
      excerpt
      featuredImage {
        node {
          sourceUrl
        }
      }
      slug
      title
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variable &lt;code&gt;first&lt;/code&gt; is the number of posts to fetch per request. The default number is 10. When you run the query, this the structure of the response.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--auVymqy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l7u7lx87m14p4z38gia.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--auVymqy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l7u7lx87m14p4z38gia.png" alt="Returned posts" width="624" height="856"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Moving along, back in your project folder, copy and paste this code in your service.ts file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchAPI&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./base&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`query FetchPosts($first: Int = 10) {
        posts(first: $first) {
          nodes {
            excerpt
            featuredImage {
              node {
                sourceUrl
              }
            }
            slug
            title
          }
        }
      }`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See how we passed the FetchPosts query to the fetchAPI function. When the getPosts function is called, it makes a request and fetches the specified number of posts, returning the data. The service.ts file provides a space for defining additional functions/services to retrieve and manage data in WordPress.&lt;/p&gt;

&lt;p&gt;We'll retrieve and display the posts on the home page which is the index.tsx file inside the pages folder. For static site generation, we will use the &lt;code&gt;getStaticProps&lt;/code&gt; and &lt;code&gt;getStaticPaths&lt;/code&gt; functions to pre-render the page. To learn more about data fetching and pre-rendering in Next.js, refer to this &lt;a href="https://nextjs.org/docs/basic-features/data-fetching/overview"&gt;resource&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;index.tsx&lt;/em&gt; file, we need to import the &lt;code&gt;GetStaticProps&lt;/code&gt; type from the next module because we're using TypeScript. We also have to import the &lt;code&gt;getPosts&lt;/code&gt; service from the &lt;em&gt;lib&lt;/em&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/lib/service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, we need to create a function called &lt;code&gt;getStaticProps&lt;/code&gt; just below the HomePage function. Inside this function, we'll call the &lt;code&gt;getPosts&lt;/code&gt; service to request data from WordPress. Once we have the posts, we'll return them as a prop which will be passed to the HomePage function (default export).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// retrieve first 100 posts&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the &lt;code&gt;getStaticProps&lt;/code&gt; function is called, it will return an array of posts, which will be passed to the HomePage function as a prop. We can access this prop inside HomePage.&lt;/p&gt;

&lt;p&gt;Each post in the returned array is an object with properties like &lt;em&gt;title&lt;/em&gt;, &lt;em&gt;slug&lt;/em&gt;, &lt;em&gt;excerpt&lt;/em&gt;, and &lt;em&gt;featuredImage&lt;/em&gt;, as we can see by examining the structure of each post in the WPGraphQL IDE.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NBAfmLpq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfmt3k9k0jnyp4j3a6w5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NBAfmLpq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfmt3k9k0jnyp4j3a6w5.png" alt="Post structure" width="747" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To display each post on the HomePage, we'll need to map through the array of posts and create a PostBlock component for each one. The PostBlock component is located in the &lt;em&gt;components&lt;/em&gt; folder.&lt;/p&gt;

&lt;p&gt;We'll also need to modify the PostBlock component to work with the title, slug, excerpt, and featuredImage properties of each post and display the data appropriately.&lt;/p&gt;

&lt;p&gt;Here's the updated &lt;em&gt;index.tsx&lt;/em&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/components/Hero&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PostBlock&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/components/PostBlock&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/lib/service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;HomePage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container mx-auto py-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-xl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-6 grid grid-flow-row grid-cols-1 md:grid-cols-2 lg:grid-cols-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostBlock&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;          &lt;span class="p"&gt;})}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// retrieve first 100 posts&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make sure that the PostBlock component can display the data for each post correctly, we need to modify it. You can find the PostBlock component inside the &lt;em&gt;components&lt;/em&gt; folder.&lt;/p&gt;

&lt;p&gt;We'll need to make sure that the PostBlock component can access the title, excerpt, slug, and featuredImage properties of each post that we're passing in. Then, we can use these properties to display the data appropriately.&lt;/p&gt;

&lt;p&gt;For example, we might want to display the post's title as a heading, the excerpt as a short summary, and the featured image as a thumbnail. We'll also need to create a link that takes the user to the full post when they click on it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;defaultImage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/assets/images/default.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostBlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post-block p-2 rounded-md&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/blog/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;relative h-80 transition-all duration-200 ease-linear hover:-translate-y-[3px]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt;
            &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;featuredImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sourceUrl&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;defaultImage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;fill&lt;/span&gt;
            &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;absolute rounded-md h-full w-full object-cover&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/blog/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post-content my-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-2xl py-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;italic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;excerpt&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to test the PostBlock component after making the modifications to ensure that the data is being displayed correctly.&lt;/p&gt;

&lt;p&gt;Once you've made all the necessary changes to your code, you can start your development server by running the &lt;code&gt;npm run dev&lt;/code&gt; command in your terminal. Make sure that your local server for WordPress is still running. Next.js will typically start the server on port 3000, so navigate to &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; in your browser to view the site. If everything is working correctly, you should see the homepage of your site but with an error on the screen like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6x3Bnj-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv0urvfdrmpn125nll8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6x3Bnj-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv0urvfdrmpn125nll8d.png" alt="Image Error" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This error is related to the usage of the next/image component in Next.js. The error message indicates that the src property of the next/image component is pointing to an image file with a URL that includes a hostname &lt;code&gt;the-headless-blog.local&lt;/code&gt; which is not allowed by the next/image configuration.&lt;/p&gt;

&lt;p&gt;If you want to use images from a source other than your Next.js project, you'll need to configure your next.config.js file properly. This includes creating a list of allowed domains from which images can be loaded. This security measure is in place to prevent cross-site scripting (XSS) attacks.&lt;/p&gt;

&lt;p&gt;So to fix the error you're seeing, you can add the &lt;code&gt;the-headless-blog.local&lt;/code&gt; hostname to the list of allowed domains in your next.config.js file. This should allow you to load images from your WordPress server. Learn more &lt;a href="https://nextjs.org/docs/messages/next-image-unconfigured-host"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s7elBdLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8am39oikycgbqfw0sn2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s7elBdLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8am39oikycgbqfw0sn2.png" alt="next.config.js" width="880" height="348"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After making changes to your code, you will need to restart your development server in order to see the changes take effect. To do this, stop the current instance of your development server by pressing &lt;code&gt;Ctrl + C&lt;/code&gt; in your terminal.&lt;/p&gt;

&lt;p&gt;Then, run the &lt;code&gt;npm run dev&lt;/code&gt; command again to start the development server with your updated code. This should ensure that your changes have been properly propagated and are visible in your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6uUsF-f5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/taxvvk1egshx8ebxf8l2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6uUsF-f5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/taxvvk1egshx8ebxf8l2.png" alt="Retrieved posts" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations on successfully retrieving posts from your WordPress server! 🎉🎉🎉&lt;/p&gt;

&lt;p&gt;However, there is one more modification we need to make to the PostBlock component. The excerpt returned from WordPress is an HTML paragraph, so we need to make some adjustments to ensure that it is displayed properly.&lt;/p&gt;

&lt;p&gt;To do this, we can change the &lt;code&gt;p&lt;/code&gt; tag in the PostBlock component to a &lt;code&gt;div&lt;/code&gt; tag and use the &lt;em&gt;dangerouslySetInnerHTML&lt;/em&gt; attribute to display the excerpt as HTML. This will ensure that the excerpt is displayed properly and any HTML tags in the excerpt are rendered correctly.&lt;/p&gt;

&lt;p&gt;Here's the updated code for the PostBlock component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;defaultImage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/assets/images/default.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostBlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post-block p-2 rounded-md&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/blog/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;relative h-80 transition-all duration-200 ease-linear hover:-translate-y-[3px]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt;
            &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;featuredImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sourceUrl&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;defaultImage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;fill&lt;/span&gt;
            &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;absolute rounded-md h-full w-full object-cover&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/blog/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post-content my-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-2xl py-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
          &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;italic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;__html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;excerpt&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After saving the changes, our posts should be rendered correctly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q1nbKJPM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdbjdz9d385g1pcqssrr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q1nbKJPM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdbjdz9d385g1pcqssrr.png" alt="Posts" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To display the correct number of posts on the homepage, we need to modify the HomePage function to access the &lt;code&gt;length&lt;/code&gt; property of the &lt;code&gt;posts&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y-9cgYZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lldal1mpbly4cbxaqpts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y-9cgYZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lldal1mpbly4cbxaqpts.png" alt="Posts length" width="880" height="40"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s2w3wJPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzetd288zrwojqw4i5w5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s2w3wJPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzetd288zrwojqw4i5w5.png" alt="Posts length" width="205" height="64"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Currently, clicking on any post on the homepage will take you to the 404 page. To fix this, we need to establish a dynamic route for the post details page.&lt;/p&gt;

&lt;p&gt;To do this, we can create a new folder called &lt;code&gt;posts&lt;/code&gt; inside the pages folder. Inside the posts folder, we can create a new file called &lt;code&gt;[slug].tsx&lt;/code&gt;. This will be the template used to render the details of each post.&lt;/p&gt;

&lt;p&gt;After creating the [slug].tsx file, we can update the link structure in the PostBlock component from "blog/${post.slug}" to "posts/${post.slug}" to match the new dynamic route we just created. This will ensure that clicking on a post on the homepage takes you to the correct post details page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oLrzH4cb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t865lr0yl1qgq4ol56x6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oLrzH4cb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t865lr0yl1qgq4ol56x6.png" alt="Updated link structure" width="569" height="42"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, to fetch a single post by slug, we can create and export a new service in the &lt;em&gt;service.ts&lt;/em&gt; file inside the &lt;em&gt;lib&lt;/em&gt; folder. Here's the query we can use to fetch a single post by slug:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;query GetPost($id: ID = "") {
  post(id: $id, idType: SLUG) {
    content
    featuredImage {
      node {
        sourceUrl
      }
    }
    slug
    title
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's the service to get a single post by slug:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPostBySlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`query GetPost($id: ID = "") {
    post(id: $id, idType: SLUG) {
      content
      featuredImage {
        node {
          sourceUrl
        }
      }
      slug
      title
    }
  }`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll call the getPostBySlug function inside the &lt;code&gt;getStaticProps&lt;/code&gt; function in the [slug].tsx file. This function will return the post data, which we'll then pass as a prop to the page component for rendering. You can copy and paste the code provided below into the [slug].tsx file, and find the code explanation right after it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GetStaticPaths&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getPostBySlug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/lib/service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PostDetails&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container mx-auto py-12&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post-header relative flex flex-col items-center justify-center w-full min-h-[200px] rounded-md&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
          &lt;span class="na"&gt;backgroundImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`url(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;featuredImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sourceUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;backgroundSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cover&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;backgroundPosition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
          &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;absolute w-full h-full z-10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgba(0, 0, 0, .5)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;z-20 text-center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-2xl md:text-4xl mb-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;italic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;By&lt;/span&gt; &lt;span class="nx"&gt;Jeffrey&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post-content w-full md:w-3/5 mx-auto mt-20 py-6 text-lg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;__html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetStaticPaths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// retrieve first 100 posts&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`/posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPostBySlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The PostDetails function is the component that will render the post page. It receives a post object as a prop which contains the information about the post to be rendered. The function simply renders a header section for the post which includes the post's featured image, title, and author. We also render the post's content right below it.&lt;/p&gt;

&lt;p&gt;In Next.js, if a page has dynamic routes and uses &lt;code&gt;getStaticProps&lt;/code&gt;, it needs to define a list of paths to be statically generated. Next.js will generate the necessary pages for each route (each post) at build time. This means that when a user visits one of our posts, they will see a pre-rendered version of the page, rather than waiting for the page to load and render on the client. In this specific case, it retrieves the first 100 posts using the &lt;code&gt;getPosts&lt;/code&gt; function from our service.ts file and maps over them to create an array of paths that corresponds to the slug of each post. The &lt;code&gt;fallback&lt;/code&gt; property is set to false, which means that if a user navigates to a post that doesn't exist, Next.js will return a 404 page.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;getStaticProps&lt;/code&gt; function has been used before in the index.tsx file, but in this case, note that the &lt;code&gt;slug&lt;/code&gt; parameter is obtained by destructuring the &lt;code&gt;params&lt;/code&gt; object passed to the function. We use slug because it corresponds to the name of our file, which is [slug].tsx, and is enclosed in square brackets. You can learn more about Next.js routing &lt;a href="https://nextjs.org/docs/routing/introduction"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After saving all the changes, clicking on a post in the home page should take you to the corresponding post details page in your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zio0XEWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j37g5tdyy1dqz8fqbpzy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zio0XEWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j37g5tdyy1dqz8fqbpzy.png" alt="Post details" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Deploying our Blog
&lt;/h2&gt;

&lt;p&gt;It's time to share our work with the world! 🎉 To make a website or blog using the WordPress + Next.js combination go live, we need to first set up an online server for the WordPress backend, and then deploy the Next.js frontend on &lt;a href="https://vercel.com"&gt;Vercel&lt;/a&gt; or on any other static hosting providers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: Usually, you would get a domain name, like example.com, and point it to your Frontend deployed on Vercel. Then, you can create a subdomain, such as api.example.com, for the WordPress backend. This allows you to use your primary domain name for your website, while the subdomain serves as a server for your site's backend.&lt;/p&gt;

&lt;p&gt;But in our case, we won't be creating a domain name or subdomain for our project. Instead, we'll use a free hosting service called &lt;a href="https://www.000webhost.com/"&gt;000webhost&lt;/a&gt; to host our WordPress backend and then deploy our Frontend on Vercel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Deploying our WordPress backend.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://www.000webhost.com/"&gt;https://www.000webhost.com/&lt;/a&gt; and create a new account. Don't forget to verify your email address, and the best part, it's free!&lt;/li&gt;
&lt;li&gt;Login and navigate to &lt;a href="https://www.000webhost.com/members/website/list"&gt;https://www.000webhost.com/members/website/list&lt;/a&gt;. Click on the "Create New Site" button, and enter a website name and password in the modal form. Finally, click on the "Create" button, and you'll be redirected to the dashboard when the process is completed.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-39AZrg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iurschqj3dpatw3r37gv.png" alt="Create website" width="779" height="471"&gt;
&lt;/li&gt;
&lt;li&gt;The next step is to install WordPress. From the dashboard, click on the "WordPress" card, and then fill out the form on the screen by entering your desired admin username and password. Once you've filled out the form, click on the "Install" button and wait for the WordPress installation process to complete.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ph-xKaPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k44lz9u9mhqbe6vxj9aj.png" alt="Host Dashbaord" width="880" height="324"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oj9JAXKp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og3lmve0ve5hgq2q2hof.png" alt="Set credentials for WordPress installation" width="880" height="486"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rS8oapzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfkrsu2aqn44cmeygge8.png" alt="WordPress Installation" width="880" height="417"&gt;
&lt;/li&gt;
&lt;li&gt;After installation, click on the "Go to configuration page" button, and you'll be prompted to log in. Enter the admin username and password you created in the previous step. If you encounter a 404 page or are redirected to the website lists page, try step 3 again.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sc4Oo4yr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qdybmn1i9gf53yb2ot9.png" alt="WordPress Dashboard" width="880" height="378"&gt;
&lt;/li&gt;
&lt;li&gt;On the WordPress dashboard, we need to download and configure plugins, as well as create some posts just like we did earlier in this article. However, if you want to migrate your local WordPress installation to your live one, you can easily use a plugin called All-in-one WP Migration. You can learn more about migration with the plugin &lt;a href="https://www.greengeeks.com/tutorials/all-in-one-wp-migration-wordpress/"&gt;here&lt;/a&gt;. Since we don't have much content on our local WordPress installation, we can simply repeat the process.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Deploying our Frontend on Vercel&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before proceeding, ensure that you have created a &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; account, and that you have knowledge of Git. If you don't have knowledge of Git, you can click &lt;a href="https://www.atlassian.com/git/tutorials/what-is-git"&gt;here&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;Next, open the &lt;em&gt;next.config.js&lt;/em&gt; file in your working folder and add the new domain of your live WordPress hostname in the domains array. &lt;code&gt;api-headless-blog.000webhostapp.com&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4dtlVAo3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skfgvijue3fif0og2pbc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4dtlVAo3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skfgvijue3fif0og2pbc.png" alt="Add the new hostname" width="880" height="233"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new repository for your frontend on your GitHub account. You can name it "nextjs-headless-wordpress."&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In your working folder, run the following commands one after the other in your terminal to initialize Git and push your code:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
git commit -m "first commit"
git branch -M main
git remote add origin &amp;lt;your git repo url&amp;gt;
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After pushing your code to the &lt;code&gt;main&lt;/code&gt; branch, go to &lt;a href="https://vercel.com"&gt;&lt;/a&gt;&lt;a href="https://vercel.com"&gt;https://vercel.com&lt;/a&gt; and log in using your GitHub account. On the dashboard, add a new project and click on the "Import" button next to the repository you just created.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Ea8X7xv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2a4ma2zis5wf1hd7eztm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Ea8X7xv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2a4ma2zis5wf1hd7eztm.png" alt="New project" width="781" height="726"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the project configuration page, in the "Environment Variables" section, enter the WordPress API endpoint as you did locally, but use the live WordPress GraphQL endpoint instead. Then click on the "Add" button. &lt;code&gt;NEXT_PUBLIC_WORDPRESS_API_ENDPOINT = &amp;lt;live endpoint&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mp-6IDOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhzpzptw3l46khj6ao8u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mp-6IDOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhzpzptw3l46khj6ao8u.png" alt="Environment Variable" width="803" height="257"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the "Deploy" button to start the deployment process.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If everything went smoothly, your project should now be deployed without any hiccups! If you run into any issues, double-check your steps and try again.&lt;/p&gt;

&lt;p&gt;Now, here's the exciting part – you can share your newly created blog with your friends! Here's the link to mine &lt;a href="https://nextjs-headless-wordpress-lac.vercel.app/"&gt;https://nextjs-headless-wordpress-lac.vercel.app/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Optimizing Blog for SEO
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YVWykstp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdm363qj4nzs16hordpv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YVWykstp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdm363qj4nzs16hordpv.jpg" alt="SEO" width="880" height="829"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If this article has been helpful so far, give me a follow on &lt;a href="https://twitter.com/JeffreySunny1"&gt;Twitter&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In a Twitter's Space, a developer expressed concerns about Next.js and React not being a suitable choice to build a blog due to the difficulty in optimizing for SEO. However, in 2023, optimizing for SEO on your website or blog is quite achievable.&lt;/p&gt;

&lt;p&gt;In this section, we'll cover the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating a custom SEO component&lt;/li&gt;
&lt;li&gt;Generating sitemap&lt;/li&gt;
&lt;li&gt;Google site ownership verification&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  
  
  Creating a Custom SEO Component
&lt;/h4&gt;

&lt;p&gt;We will implement a custom SEO component that can enhance the search engine optimization (SEO) of our blog by generating meta tags and other HTML markup. This component will accept multiple props, including the page's title, description, image, and type, to create relevant meta tags for both search engine indexing and social media sharing. Additionally, it will incorporate links to different icons, like the favicon, and set the canonical URL to avoid duplication issues. The utilization of this component will ensure that our blog has optimized meta tags, resulting in improved search engine rankings and an enhanced user experience when sharing the site on social media platforms.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 1&lt;/em&gt;&lt;br&gt;
Add a new environment variable called &lt;code&gt;NEXT_PUBLIC_ROOT_URL&lt;/code&gt; in the .env file with the value set to the root URL of our blog. As we are currently in the development phase, the root URL should be &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pD18UZH7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wh48xl8yekyw1dubdwix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pD18UZH7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wh48xl8yekyw1dubdwix.png" alt=".env file" width="880" height="74"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 2&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Create favicons for your blog using an online generator like &lt;a href="https://favicon.io/"&gt;Favicon.io&lt;/a&gt;. These icons will be utilized in the upcoming SEO component. It is recommended to generate 5 types of icons for optimal optimization, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;faviconIco: This is the favicon icon for the blog/website, which appears in the browser tab and bookmarks.&lt;/li&gt;
&lt;li&gt;favicon180: This icon is used for Apple devices when a user adds a website to their home screen.&lt;/li&gt;
&lt;li&gt;favicon32: This is another favicon icon, but with a size of 32x32 pixels.&lt;/li&gt;
&lt;li&gt;favicon16: This favicon icon is even smaller, with a size of 16x16 pixels.&lt;/li&gt;
&lt;li&gt;maskIcon: This is a special icon that is used as the mask for the pinned tab icon in Safari browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, I won't be generating a maskIcon for this project.&lt;/p&gt;

&lt;p&gt;After generating the favicons using the online generator, a zip file containing the icons will be downloaded. Alternatively, you can create these icons yourself in any way that you prefer.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;assets&lt;/em&gt; folder, create a new folder for the icons. You can name it "favicons" and copy the downloaded icons inside the folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4fspel8I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5548lynpzofsmzth62pd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fspel8I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5548lynpzofsmzth62pd.png" alt="Favicons folder" width="343" height="221"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;components&lt;/em&gt; folder, create a new folder and name it "SEO". Inside the folder, create an index.tsx file which will hold the code for the component. Copy and paste the code below into your file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;faviconIco&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/assets/favicons/favicon.ico&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;appleTouchIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/assets/favicons/apple-touch-icon.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;favicon32&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/assets/favicons/favicon-32x32.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;favicon16&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/assets/favicons/favicon-16x16.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;defaultImage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/assets/images/default.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;SEOProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;website&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;article&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_ROOT_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;defaultImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ROOT_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_ROOT_URL&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SEO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pageImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;website&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;SEOProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ROOT_URL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asPath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;charSet&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;viewport&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;width=device-width, initial-scale=1.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;IE=edge&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;httpEquiv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;X-UA-Compatible&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;robots&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;follow, index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;twitter:card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;summary_large_image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;twitter:site&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@JeffreySunny1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;twitter:image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;twitter:title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;twitter:description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:site_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jeffrey's Blog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shortcut icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;faviconIco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple-touch-icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;sizes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;180x180&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;appleTouchIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;sizes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;32x32&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;favicon32&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;sizes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;16x16&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;favicon16&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* &amp;lt;link rel="mask-icon" href="" color="#5bbad5" /&amp;gt; Add mask icon */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;msapplication-TileColor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#da532c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;theme-color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffffff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;canonical&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The components generates meta tags and other HTML markup to improve search engine optimization (SEO) for our blog. It takes four props - title, description, image, and type - to generate appropriate meta tags for social media sharing and search engine indexing. I included various meta tags, including those for Twitter and Open Graph, as well as link tags for the different sizes of favicons. The canonical link is also set to ensure that search engines index the correct URL and to avoid duplicates.&lt;/p&gt;

&lt;p&gt;Let's modify our pages/index.tsx and posts/[slug].tsx files to use the new SEO component.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;pages/index.tsx&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;HomePage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SEO&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome to Jeffrey's Blog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Access all tech content and beyond&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container mx-auto py-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-xl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-6 grid grid-flow-row grid-cols-1 md:grid-cols-2 lg:grid-cols-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostBlock&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;          &lt;span class="p"&gt;})}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vSyfXe8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r23pzazgf2zhx9syqybq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vSyfXe8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r23pzazgf2zhx9syqybq.png" alt="SEO" width="522" height="82"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;posts/[slug].tsx&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PostDetails&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SEO&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; - Posts`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;excerpt&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;featuredImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sourceUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;article&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container mx-auto py-12&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
          &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post-header relative flex flex-col items-center justify-center w-full min-h-[200px] rounded-md&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
            &lt;span class="na"&gt;backgroundImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`url(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;featuredImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sourceUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;backgroundSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cover&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;backgroundPosition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
            &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;absolute w-full h-full z-10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgba(0, 0, 0, .5)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;z-20 text-center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-2xl md:text-4xl mb-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;italic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;By&lt;/span&gt; &lt;span class="nx"&gt;Jeffrey&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
          &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post-content w-full md:w-3/5 mx-auto mt-20 py-6 text-lg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;__html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the post details page, the post's title, excerpt, and featured image are passed to the SEO component. The page's type is set to "article" to indicate the type of content it represents. If you inspect the head element using developer tools, you will see all the SEO tags that we included, which are necessary for optimizing the page's search engine ranking.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wSg9dggz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbbwy5gfj2zmmnf25qe5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wSg9dggz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbbwy5gfj2zmmnf25qe5.png" alt="Developer tools" width="496" height="615"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  
  
  Generating Sitemap
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Why are we generating a sitemap?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sitemaps help search engines like Google to crawl and index a website more effectively, making it easier for users to discover the content on the site and they can be submitted to search engines as part of the website's search engine optimization (SEO) strategy. &lt;/p&gt;

&lt;p&gt;To generate a sitemap for our blog,&lt;/p&gt;

&lt;p&gt;To install the sitemap generator package for Next.js, run npm install next-sitemap. Then create a basic config file named next-sitemap.config.js in your root directory and add the following code into it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/** @type {import('next-sitemap').IConfig} */&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;siteUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_ROOT_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;generateRobotsTxt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ensure you use the correct environment variable that points to your root url.&lt;/p&gt;

&lt;p&gt;Make sure to use the right root url environment variable if yours is different. Then, add a "postbuild" script with the value "next-sitemap" in package.json. This script will generate a sitemap for our blog right after the "build" script is run.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ugsqDCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cgili8ffxkbseh804ve5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ugsqDCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cgili8ffxkbseh804ve5.png" alt="Package.json postbuild" width="514" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run the &lt;code&gt;npm run build&lt;/code&gt; command on your terminal and after which start your development server. A sitemap for your blog should have been generated and you can access it on this link: &lt;a href="http://localhost:3000/sitemap-0.xml"&gt;http://localhost:3000/sitemap-0.xml&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5IOzkLNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47icb4zp3wone5ri2bl2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5IOzkLNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47icb4zp3wone5ri2bl2.png" alt="Generated sitemap" width="880" height="547"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B8KoplvY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00ssdwl33mwj5uorx91w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B8KoplvY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00ssdwl33mwj5uorx91w.png" alt="Generated Sitemap" width="880" height="300"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  
  
  Google Site Ownership Verification
&lt;/h4&gt;

&lt;p&gt;A key part of search engine optimization (SEO) is verifying ownership of your domain/website and there are several benefits of verfying your domain or website or in this case, our blog with Google including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Indexing of your website: Google uses your site ownership verification as a way to confirm that you are the owner of a website, which can help to ensure that your website is properly indexed in Google search results.&lt;/li&gt;
&lt;li&gt;Security: It helps to prevent unauthorized access to your website and to ensure that you have control over your website's presence on Google search.&lt;/li&gt;
&lt;li&gt;SEO: By accessing Google Search Console, you can monitor your website's or blog's performance on Google search results and identify opportunities to improve your search engine optimization (SEO) efforts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To verify ownership of your blog on Google, follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sign into your Google account and access &lt;a href="https://search.google.com/search-console"&gt;Google Search Console&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Click "Add property" and enter your blog's homepage URL, which should be the live link of your blog (e.g. &lt;a href="https://nextjs-headless-wordpress-lac.vercel.app/"&gt;https://nextjs-headless-wordpress-lac.vercel.app/&lt;/a&gt;). Select the appropriate property type when prompted.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q30iVZ-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt1ghr0uk4vqaipx7812.png" alt="Google Search Console" width="880" height="666"&gt;
&lt;/li&gt;
&lt;li&gt;If you have a custom domain, choose the "Domain" tab and enter your domain name. Otherwise, choose the "URL prefix" tab and click "Continue".&lt;/li&gt;
&lt;li&gt;Select the "HTML tag" verification method and copy the provided meta tag. Do not close the modal or click anything.&lt;/li&gt;
&lt;li&gt;Open the SEO component file in the _components_folder and paste the meta tag code within the Head tag, like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kM-pxBXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9zv7xmnnizr6xceeakl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kM-pxBXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9zv7xmnnizr6xceeakl.png" alt="Site ownership verification" width="677" height="239"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: You need to add the &lt;code&gt;NEXT_PUBLIC_ROOT_URL&lt;/code&gt; environment variable to the project settings of your project on Vercel. This variable should be set to the live URL of your blog, such as &lt;a href="https://nextjs-headless-wordpress-lac.vercel.app"&gt;https://nextjs-headless-wordpress-lac.vercel.app&lt;/a&gt;. Don't forget to hit the "Save" button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3QKM8VO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tr6m1b9r4hepgxcy2gft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QKM8VO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tr6m1b9r4hepgxcy2gft.png" alt="Updated environment variable" width="880" height="316"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pushing our updated code to GitHub allows us to redeploy our blog. The following commands should be executed sequentially:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m "sitemap generation and adjustment"
git push origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our Vercel setup is configured to monitor changes made on the main branch and will automatically redeploy the blog once an update is detected.&lt;/p&gt;

&lt;p&gt;After successfully deploying, go back to the Google Search Console page and click on the "Verify" button. If the meta tag has been added correctly, a message reading "Ownership verified" should appear on the screen.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j_iK6GEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzsqfswjrhdvboiie5sm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j_iK6GEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzsqfswjrhdvboiie5sm.png" alt="Image description" width="849" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, you need to add the sitemap to Google Search Console. On the sidebar, click on the "Sitemaps" link. In the "Add a new sitemap" box, enter "sitemap.xml," which is the location of our sitemap (&lt;a href="https://nextjs-headless-wordpress-lac.vercel.app/sitemap.xml"&gt;https://nextjs-headless-wordpress-lac.vercel.app/sitemap.xml&lt;/a&gt;), and click "Submit."&lt;/p&gt;

&lt;p&gt;Congratulations! Your blog is now SEO optimized and ready to be crawled by search engines though it may take some time for the sitemap to fully propagate.&lt;/p&gt;




&lt;h2&gt;
  
  
  Summary
&lt;/h2&gt;

&lt;p&gt;Thank you for staying with me until this point folks 😎. I want to emphasize that this comprehensive guide is not limited to just blogs. It can also be used to develop robust web applications such as e-commerce sites, real estate listings, online directories, and more. By utilizing plugins such as Advanced Custom Fields and WooCommerce, you can create custom fields and layouts tailored to your application's needs. With authentication and authorization features, WordPress can serve as your backend while Next.js handles your frontend, resulting in a highly responsive and cost-effective website.&lt;/p&gt;

&lt;p&gt;Thank you for staying with me. If you found this guide helpful, please consider following me on &lt;a href="https://twitter.com/JeffreySunny1"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to leave your comments, thoughts, and questions in the comments section below. I would be delighted to respond to them!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image sources: &lt;a href="https://freepik.com"&gt;https://freepik.com&lt;/a&gt;, &lt;a href="https://canva.com"&gt;https://canva.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>wordpress</category>
      <category>blog</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Conditional Statements in JavaScript: Switch</title>
      <dc:creator>Max</dc:creator>
      <pubDate>Tue, 04 Apr 2023 04:34:02 +0000</pubDate>
      <link>https://dev.to/max24816/conditional-statements-in-javascript-switch-53l</link>
      <guid>https://dev.to/max24816/conditional-statements-in-javascript-switch-53l</guid>
      <description>&lt;p&gt;In JavaScript, the switch statement is another way to achieve the conditional statements instead of if else. While doing multi level condition check this one is really helpful.&lt;/p&gt;

&lt;h2&gt;
  
  
  &lt;a href="https://www.programdoc.com/javascript/switch"&gt;The Switch Statement&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;switch&lt;/code&gt; statement evaluates an expression and compares it with a series of cases. If there is a match, the code inside that case is executed. The switch statement is often used as an alternative to the if-else statement when multiple conditions need to be evaluated.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;break&lt;/code&gt; keyword is used in each case to break the switch statement once the case condition is true, if break is not used then it will check other case condition statements. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;default&lt;/code&gt; keyword is used at the end of switch, this block will be executed if the above case are not true.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;syntax:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// code to be executed when expression matches value1&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// code to be executed when expression matches value2&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// code to be executed when none of the cases match expression&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;expression&lt;/code&gt; is the expression to be evaluated, and &lt;code&gt;value1&lt;/code&gt;, &lt;code&gt;value2&lt;/code&gt;, etc., are the cases to compare with the expression. If the expression matches &lt;code&gt;value1&lt;/code&gt;, the code inside that case will be executed. The &lt;code&gt;break&lt;/code&gt; keyword is used to exit the switch statement. If none of the cases match the expression, the code inside the &lt;code&gt;default&lt;/code&gt; case will be executed.&lt;/p&gt;

&lt;h3&gt;
  
  
  Example:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dayOfWeek&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ONE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TWO&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;THREE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FOUR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FIVE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Invalid Number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, since &lt;code&gt;number&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;, the message "TWO" will be printed to the console.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Using the Linux Free Command With Examples</title>
      <dc:creator>Daniel Favour</dc:creator>
      <pubDate>Tue, 04 Apr 2023 04:30:29 +0000</pubDate>
      <link>https://dev.to/danielfavour/using-the-linux-free-command-with-examples-4lkc</link>
      <guid>https://dev.to/danielfavour/using-the-linux-free-command-with-examples-4lkc</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;I wrote this article originally for &lt;a href="https://www.turing.com/kb/how-to-use-the-linux-free-command"&gt;Turing&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Regular memory checks are crucial to maintaining the performance of your Linux system. Knowing your system's memory can also aid in debugging and preventing poor application response times while running memory-intensive programs.&lt;/p&gt;

&lt;p&gt;There are several ways to view the RAM on your Linux system using the command line, but for the scope of this article, we will focus on the 'free' command.&lt;/p&gt;

&lt;p&gt;In this article, we will discuss what the Linux free command is, how it works, and the benefits of the command.&lt;/p&gt;

&lt;h2&gt;
  
  
  What is the &lt;code&gt;free&lt;/code&gt; command?
&lt;/h2&gt;

&lt;p&gt;The free command is a &lt;a href="https://www.turing.com/jobs/remote-linux-developer"&gt;Linux&lt;/a&gt; command that allows you to check for memory RAM on your system or to check the memory statics of the Linux operating system.&lt;/p&gt;

&lt;p&gt;To view your system's memory statics, run the free command in your terminal as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;user@ubuntu:~$ free

          total    used      free   shared   buff/cache  available
Mem:    8029356  794336   6297928   183384       937092    6816804
Swap:         0       0         0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Understanding the output
&lt;/h2&gt;

&lt;p&gt;The output of the &lt;code&gt;free&lt;/code&gt; command provides various metrics related to system memory, including total, used, free, shared, buff/cache, and available. To gain a comprehensive understanding of these fields, it is important to examine each one individually. To begin, we'll focus on the 'Mem' metric, which represents the total amount of physical RAM installed on the system.&lt;/p&gt;

&lt;h3&gt;
  
  
  Examining the &lt;code&gt;Mem&lt;/code&gt; metrics and its fields
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Mem&lt;/code&gt; metric, as displayed in the output of the &lt;code&gt;free&lt;/code&gt; command, serves as a measurement of the physical RAM (Random Access Memory) installed on a computer system. It offers a comprehensive view of the total amount of installed RAM and its current usage by running programs and processes. By monitoring this metric, it is possible to detect any potential memory-related issues within the system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qwW5axUg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gcljdnlrqzgggjrqaege.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qwW5axUg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gcljdnlrqzgggjrqaege.png" alt="Mem metrics" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Mem metric also includes several fields that give an overview of the system's memory usage, such as:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Total&lt;/strong&gt;: This is the total amount of physical RAM on your system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Used&lt;/strong&gt;: This shows the amount of memory that has been used up or amount of RAM that is currently being utilized by running programs and processes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Free&lt;/strong&gt;: This is the amount of physical memory that is not currently being used by any running processes and is ready to be allocated to new processes. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Shared&lt;/strong&gt;: This displays the total amount of memory used by the temporary &lt;code&gt;tmpfs&lt;/code&gt; file system. &lt;code&gt;Tmpfs&lt;/code&gt; is a file system that stores files in the computer's main memory (RAM) making it faster to access compared to traditional storage methods like a hard drive. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Buff/cache&lt;/strong&gt;: This is the memory that the kernel (operating system) uses to store recently used data so that it can be accessed quickly. It is used to speed up the performance of the computer by reducing the amount of time it takes to access data from the hard drive. Think of it like a temporary storage area where the computer stores data that it might need soon, so that it doesn't have to search for it again later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Available&lt;/strong&gt;: This shows an estimated value of how many memory resources are still open for use. This value can fluctuate as processes start and stop, and memory is freed up and allocated. So, while it may not actively be used by a process at the moment, it is still available to be allocated to a process if needed.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Free and available memory can be tricky to understand. Think of free memory as empty rooms in your house that are ready to be occupied, representing the amount of physical memory that is not currently being used by any running processes and is ready to be allocated to new processes. You can also think of available memory as the total number of rooms that can be occupied including the empty ones and the ones in use for caching and buffering.&lt;/p&gt;

&lt;p&gt;An example of caching would be storing items in a storage room that you frequently use, so that you can easily access them when you need them. Buffering would be like having a guest room ready to be used in case you have unexpected visitors. Both the storage room and guest room are being used, but they are still considered "available" because they can be used for their intended purpose if necessary.&lt;/p&gt;

&lt;h3&gt;
  
  
  Examining the &lt;code&gt;swap&lt;/code&gt; metrics and its fields
&lt;/h3&gt;

&lt;p&gt;The swap metric shows the amount of swap space that is currently being used and the amount of swap space that is available for use.&lt;/p&gt;

&lt;p&gt;Swap, also known as virtual memory, is a mechanism that enables computer systems to use extra memory by creating a file or partition on a storage volume. This serves as a backup option when the system's physical RAM is full and can't accommodate new processes. The operating system transfers data from RAM to the swap space, allowing the system to continue running smoothly. &lt;/p&gt;

&lt;p&gt;The swap metric also includes several fields that give an overview of the system's memory usage, such as:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;total&lt;/strong&gt;: The size of the swap partition or swap file&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;used&lt;/strong&gt;: The amount of swap space in use&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;free&lt;/strong&gt;: The remaining (unused) swap space&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Referring back to the previous output gotten when the free command was run, the output fields for swap resulted as zero (0). This entails that there is no swap space made available on the system.&lt;/p&gt;

&lt;h2&gt;
  
  
  Free command options
&lt;/h2&gt;

&lt;p&gt;The free command can be tailored to show memory usage in any desired format.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To get the memory information in bytes, add the &lt;code&gt;-b&lt;/code&gt; option to the command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;user@ubuntu:~$ free -b

             total         used         free      sharedbuff/cache     
  available
Mem:    8222060544    700334080   6214823936   188076032     1306902528    7087677440
Swap:         0       0         0

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;To get the memory information in kilobytes, add the &lt;code&gt;-k&lt;/code&gt; option to the command. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the free command is used alone, as was demonstrated earlier, without any option, the default displayed of the memory is in kilobytes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;user@ubuntu:~$ free -k
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;To view the memory information in megabytes, add the &lt;code&gt;-m&lt;/code&gt; option to the command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;user@ubuntu:~$ free -m

          total    used    free   shared    buff/cache   available
Mem:       7841     668    5925      179          1247        6759
Swap:         0       0         0

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;To view the memory information in gigabytes, add the &lt;code&gt;-g&lt;/code&gt; option to the command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;user@ubuntu:~$ free -g

          total    used    free   shared    buff/cache   available
Mem:          7       0       5        0             1           6
Swap:         0       0       0

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;To view the memory information in human-readeable format, add the &lt;code&gt;-h&lt;/code&gt; option to the command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;user@ubuntu:~$ free -h

         total     used    free   shared   buff/cache   available
Mem:     7.7Gi    675Mi   5.8Gi    179Mi        1.2Gi       6.6Gi
Swap:       0B       0B      0B

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Benefits of the &lt;code&gt;free&lt;/code&gt; command in Linux
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cX9sHrRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8hvcklzdsx753g3jqpj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cX9sHrRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8hvcklzdsx753g3jqpj.png" alt="Benefits of free command" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;free&lt;/code&gt; command is an invaluable tool for managing and monitoring memory usage. In this section, we will delve into the benefits of utilizing this command.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Display current memory usage&lt;/strong&gt;&lt;br&gt;
Running the free command without any arguments will display the current amount of used and available memory on the system, as well as the amount of memory being used for system buffers and disk cache. This helps you to know processes eating up your systems storage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Monitor memory usage over time&lt;/strong&gt;&lt;br&gt;
By using the free command in combination with the watch command, you can display the current memory usage at regular intervals. For example, "watch -n 5 free -m" will display the current memory usage every 5 seconds. This can be useful for identifying patterns in memory usage over time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Identify memory leaks&lt;/strong&gt;&lt;br&gt;
If the "used" column of the free command output is consistently high, it may indicate a memory leak in one of the running programs. By running the command periodically and checking the used memory, you can identify the process that's causing the leak.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Check for high buffer/cache usage&lt;/strong&gt;&lt;br&gt;
If the "buffers" and "cached" columns are consistently high, it may indicate that the system is using a lot of memory for caching. While this is generally not a problem, it can cause slow performance if the system is low on memory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Display memory usage in different units&lt;/strong&gt;&lt;br&gt;
By using the -m or -g options, you can display the memory usage in megabytes or gigabytes, respectively.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Comparison with other command-line tools&lt;/strong&gt;&lt;br&gt;
The free command can be used in conjunction with other command-line tools like top, htop, and vmstat, to provide a more complete picture of the system's memory usage and performance.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  
  
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we discussed the free command, how it works and its benefits.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;free&lt;/code&gt; command in Linux is a useful tool for monitoring the system's memory usage as well as a valuable tool for managing and optimizing the performance of Linux systems. Understanding the output of the free command can help administrators and users identify potential memory bottlenecks and troubleshoot performance issues.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Best Tailwind Component</title>
      <dc:creator>mahiuddinTuhin</dc:creator>
      <pubDate>Tue, 04 Apr 2023 03:57:19 +0000</pubDate>
      <link>https://dev.to/mahiuddintuhin/best-tailwind-component-mik</link>
      <guid>https://dev.to/mahiuddintuhin/best-tailwind-component-mik</guid>
      <description>&lt;p&gt;*&lt;em&gt;When it comes about front end development with tailwind then  we feel some pre-made component. But installing third-party library sometimes is really pain and tough to customize also. Here I'm sharing few best tailwind components without installing third party library. *&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://www.floatui.com/components"&gt;FloatUI&lt;/a&gt;:
&lt;/h2&gt;

&lt;p&gt;UI components for React and Vue (soon) with Tailwind CSS, every example support both directions LTR and RTL. Also it has some free templates.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGDex4Am--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0zy89cdzmtgz1gzvdmy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGDex4Am--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0zy89cdzmtgz1gzvdmy.png" alt="FloatUI react tailwind component" width="880" height="402"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://www.hyperui.dev/"&gt;HyperUI&lt;/a&gt;:
&lt;/h2&gt;

&lt;p&gt;HyperUI is a collection of free Tailwind CSS components that can be used in your next project. With a range of components, you can build your next marketing website, admin dashboard, eCommerce store and much more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MWLMM0Sh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwe44xdg2ylla3t8e3ze.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MWLMM0Sh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwe44xdg2ylla3t8e3ze.png" alt="HyperUI react tailwind component" width="880" height="397"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://merakiui.com/components"&gt;Merakiui&lt;/a&gt;:
&lt;/h2&gt;

&lt;p&gt;Streamline your web development process with our comprehensive solution. Our form layouts, tables, and modal dialogs are expertly crafted to help you build beautiful and responsive web applications effortlessly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---cu1IZoX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fn44wmsxv2a1uh5ajij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---cu1IZoX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fn44wmsxv2a1uh5ajij.png" alt="react tailwind component" width="880" height="375"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://kitwind.io/products/kometa/components"&gt;kitwind&lt;/a&gt;:
&lt;/h2&gt;

&lt;p&gt;kitwindare giving away our first UI kit for free. It includes over 130 sections, built with TailwindCSS, for your awesome projects.&lt;/p&gt;

&lt;p&gt;All the sections are fully responsive and available in HTML, VueJS, and React. You can use them on unlimited personal and commercial projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NoiT_HxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x7i2an3zem3nh1y83vk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NoiT_HxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x7i2an3zem3nh1y83vk.png" alt="react tailwind component" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://tailblocks.cc/"&gt;tailblocks&lt;/a&gt;:
&lt;/h2&gt;

&lt;p&gt;Tailblocks is a website that provides a collection of free, open-source Tailwind CSS blocks. These blocks can be used to quickly create complex UI components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6OelTCAk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2liujib1lbjttgk9j2e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6OelTCAk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2liujib1lbjttgk9j2e.png" alt="react tailwind component" width="880" height="393"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://www.mambaui.com/components/hero"&gt;Mambaui&lt;/a&gt;:
&lt;/h2&gt;

&lt;p&gt;Mamba UI is a free, open-source collection of UI components&lt;br&gt;
and templates based on Tailwind CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HN2y_wtU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x2wthvylpjx0dfhoyb5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HN2y_wtU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x2wthvylpjx0dfhoyb5.png" alt="react tailwind component" width="880" height="391"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://windstatic.com/"&gt;Windstatic&lt;/a&gt;:
&lt;/h2&gt;

&lt;p&gt;A set of 161 elements &amp;amp; layouts made with Tailwind CSS and Alpine.js Skillfully designed with an eye for aesthetics, offering an excellent starting point for your upcoming project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bR5ZhSVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnnayu4t6z3dwnll8e41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bR5ZhSVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnnayu4t6z3dwnll8e41.png" alt="Image description" width="880" height="402"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://tailus.io/"&gt;Tailus&lt;/a&gt;:
&lt;/h2&gt;

&lt;p&gt;Easy to customize UI components, blocks and templates built on top of modern frontend tools to make your ideas stand out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kniPnUb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lc39klemd6iydqvs2t00.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kniPnUb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lc39klemd6iydqvs2t00.png" alt="react tailwind component" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://wickedblocks.dev/"&gt;Wickedblocks&lt;/a&gt;:
&lt;/h2&gt;

&lt;p&gt;Over 120 fully responsive component and blocks you can copy paste into your Tailwind projects. Use it in as many projects you want to and as many times you need too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B2rZLwbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zf9it090qbw8bhsq0ao1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B2rZLwbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zf9it090qbw8bhsq0ao1.png" alt="react tailwind component" width="880" height="397"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://www.tailwind-kit.com/components"&gt;Tailwind-kit&lt;/a&gt;:
&lt;/h2&gt;

&lt;p&gt;Tail-kit gives you access to over 250 free components and free templates, based on Tailwind CSS 3.0. It's all compatible with React, VueJS and Angular application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_yAfKF2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9we5yno4ix4tfgcvynw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_yAfKF2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9we5yno4ix4tfgcvynw.png" alt="react tailwind component" width="880" height="395"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://flowrift.com/c/banner"&gt;Flowrift&lt;/a&gt;:
&lt;/h2&gt;

&lt;p&gt;A library filled with Tailwind CSS UI blocks, components &amp;amp; templates. Browse an ever-growing UI kit inside a highly optimized app. View / copy / customize.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LviBZS1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/taw9i70svd6z45trvcyb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LviBZS1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/taw9i70svd6z45trvcyb.png" alt="react tailwind component" width="880" height="342"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://treact.owaiskhan.me/"&gt;Treact Owaiskhan&lt;/a&gt;:
&lt;/h2&gt;

&lt;p&gt;Treact Owaiskhan provides 52 components along with the premade landing pages so you can create your own landing page within minutes as you see fit. You can combine these components to create 1000s of unique attractive web pages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UlMULBr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/223kuowlbeorch297bkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UlMULBr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/223kuowlbeorch297bkd.png" alt="react tailwind component" width="880" height="377"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://kutty.netlify.app/components/"&gt;Kutty&lt;/a&gt;:
&lt;/h2&gt;

&lt;p&gt;Kutty is a tailwind plugin for building web applications. It has a set of accessible and reusable components that are commonly used in web applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jS9xWtk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3cxips3mq5b5vrqbpqr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jS9xWtk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3cxips3mq5b5vrqbpqr.png" alt="react tailwind component" width="880" height="395"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://www.gust-ui.com/components"&gt;Gust UI&lt;/a&gt;:
&lt;/h2&gt;

&lt;p&gt;Gust UI is an assortment of components, elements, and pages constructed using Tailwind CSS in order to make your development process easier and web apps elegant.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FVCOLhLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kd9665a2cgd1d1nbelt1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FVCOLhLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kd9665a2cgd1d1nbelt1.png" alt="react tailwind component" width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://mynaui.com/"&gt;Mynaui&lt;/a&gt;:
&lt;/h2&gt;

&lt;p&gt;Mynaui contains UI Components and Elements made with Tailwind CSS ✨ Free · Open Source · Accessible · With Figma · Other Buzzwords&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qsMGctWC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hq4mna8x3tycefs22wwr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qsMGctWC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hq4mna8x3tycefs22wwr.png" alt="react tailwind component" width="880" height="377"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://tailgrids.com/components"&gt;Tailgrids&lt;/a&gt;:
&lt;/h2&gt;

&lt;p&gt;Wide range of 500+ free &amp;amp; premium Tailwind CSS UI components, blocks, sections, examples and templates to create beautiful web user interface for your web projects fast. High-quality UI elements handcrafted to solve your design and coding challenges for making your web project closer to launch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WKSLIr_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/na93j6iutqjvxdi6iv6w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WKSLIr_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/na93j6iutqjvxdi6iv6w.png" alt="Image description" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all from side. It will be great if there needs any correction or other components to add, please share with with me.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>react</category>
      <category>webcomponents</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Creating responsive and fluid layouts with flexbox, rem units, and mobile-first approach</title>
      <dc:creator>Mariana Caldas</dc:creator>
      <pubDate>Tue, 04 Apr 2023 03:28:48 +0000</pubDate>
      <link>https://dev.to/wdp/creating-responsive-and-fluid-layouts-with-flexbox-rem-units-and-mobile-first-approach-387i</link>
      <guid>https://dev.to/wdp/creating-responsive-and-fluid-layouts-with-flexbox-rem-units-and-mobile-first-approach-387i</guid>
      <description>&lt;p&gt;In today's world, where users access websites on different devices with varying screen sizes and resolutions, it's essential to design layouts that are responsive and fluid. In this blog post, we'll cover the basics of using &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox"&gt;flexbox&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units"&gt;rem units&lt;/a&gt;, and &lt;a href="https://zellwk.com/blog/how-to-write-mobile-first-css/"&gt;media-query mobile-first approach&lt;/a&gt; to create layouts that adapt seamlessly to different screen sizes.&lt;/p&gt;

&lt;h2&gt;
  
  
  What is Flexbox?
&lt;/h2&gt;

&lt;p&gt;Flexbox is a powerful CSS layout module that allows us to create flexible and responsive layouts. It works by using flex containers and flex items. Flex containers are used to define the flexbox layout, while flex items are the individual elements inside the container.&lt;/p&gt;

&lt;p&gt;Using flexbox, we can easily create layouts that adapt to different screen sizes and resolutions. It also makes it easier to align and position elements within the layout.&lt;/p&gt;

&lt;h2&gt;
  
  
  The Mobile First Approach
&lt;/h2&gt;

&lt;p&gt;Before we dive into the details of using flexbox and rem units, it's essential to understand the concept of the mobile-first approach. This approach involves designing for mobile devices first and then building up to larger screens with media queries.&lt;/p&gt;

&lt;p&gt;The mobile-first approach ensures that our designs are optimized for the majority of users who access the web on mobile devices. It also helps to keep our code lean and efficient by focusing on the essentials first and then adding more complexity as needed.&lt;/p&gt;

&lt;h2&gt;
  
  
  Using Rem Units
&lt;/h2&gt;

&lt;p&gt;Rem units are a relative length unit that is based on the font-size of the root element. By using rem units, we can create layouts that are more flexible and adaptable to different screen sizes.&lt;/p&gt;

&lt;p&gt;To use rem units effectively, we need to set the font-size on the root element in rem units. This way, all other elements on the page will be sized relative to the font-size on the root element.&lt;/p&gt;

&lt;h2&gt;
  
  
  Creating a Simple Layout
&lt;/h2&gt;

&lt;p&gt;Now that we have a basic understanding of flexbox and rem units let's use them to create a simple two-column layout with an image and text.&lt;/p&gt;

&lt;p&gt;Here's the HTML code for our layout:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="container"&amp;gt;
  &amp;lt;div class="image"&amp;gt;
    &amp;lt;img src="img/img-1.jpg" alt="Image" /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class="content"&amp;gt;
    &amp;lt;h2&amp;gt;Title&amp;lt;/h2&amp;gt;
    &amp;lt;p&amp;gt;
      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum
      dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit
      amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet,
      consectetur adipiscing elit.Lorem ipsum dolor sit amet, consectetur
      adipiscing elit.Lorem ipsum dolor sit amet, consectetur adipiscing
      elit.
    &amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's the CSS code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;html {
  font-size: 62.5%; /* 1rem = 10px */
}

/* Use border-box box-sizing for all elements */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Flex container */
.container {
  display: flex;
  flex-wrap: wrap;
  align-items: stretch; /* Stretch flex items to fill container */
  gap: 2rem;
}

/* Flex items */
.image,
.content {
  flex-basis: 100%;
  padding: 1rem;
  font-size: 1.6rem;
  font-family: 'Roboto', sans-serif;
}

.image img {
  max-width: 100%; /* Make image take the max width of its parent container, the .image div */
}

/* Mobile-first breakpoint */
@media (min-width: 768px) {
  /* Flex items take up full width on small screens */
  .image,
  .content {
    flex-basis: calc(50% - 1rem);
    font-size: 1.8rem;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example, the base &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;10px&lt;/code&gt; is set on the &lt;code&gt;html&lt;/code&gt; element, and the &lt;code&gt;box-sizing&lt;/code&gt; property is set to &lt;code&gt;border-box&lt;/code&gt; for all elements. This ensures that any padding or borders added to an element are included in the element's total width and height. The layout is created using flexbox, where a &lt;code&gt;container&lt;/code&gt; is set to display flex and the child items are set to take up half of the available width on larger screens, with a gap added between them using the &lt;code&gt;gap&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;The mobile-first breakpoint is set at a minimum width of &lt;code&gt;768px&lt;/code&gt;. At this breakpoint, the flex items take up full width on small screens by setting &lt;code&gt;flex-basis: 100%&lt;/code&gt; on the &lt;code&gt;.image&lt;/code&gt; and &lt;code&gt;.content&lt;/code&gt; classes. This mobile-first approach ensures you start with styles for small screens and add styles as the screen size increases.&lt;/p&gt;

&lt;h2&gt;
  
  
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we've explored how flexbox, the rem units, and the mobile-first approach can be used to create responsive and fluid layouts. By using flexbox, we can easily create complex layouts with different columns and alignment options. The rem approach allows us to make the layout more flexible and scalable by using a mobile-first approach and applying the font size to the root element. This ensures that the layout is optimized for smaller screens and gradually enhanced for larger screens.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gotIkShk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5ck7vwaep874dnnqyv0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gotIkShk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5ck7vwaep874dnnqyv0.gif" alt="Check out the fluid layout result" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flexbox</category>
      <category>frontend</category>
    </item>
    <item>
      <title>useState or useReducer – which to choose for your application</title>
      <dc:creator>adams mercy</dc:creator>
      <pubDate>Tue, 04 Apr 2023 03:20:44 +0000</pubDate>
      <link>https://dev.to/m_adams1909/usestate-or-usereducer-which-to-choose-for-your-application-ia5</link>
      <guid>https://dev.to/m_adams1909/usestate-or-usereducer-which-to-choose-for-your-application-ia5</guid>
      <description>&lt;p&gt;&lt;code&gt;useReducer&lt;/code&gt; helps us manage state in a complex application. What exactly is &lt;code&gt;useReducer&lt;/code&gt;? Is it an alternative to &lt;code&gt;useState&lt;/code&gt;? &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useReducer&lt;/code&gt; are both used to handle state logic. It is thereby necessary to understand when to use these hooks. &lt;code&gt;useReducer&lt;/code&gt; is not replacing &lt;code&gt;useState&lt;/code&gt; in any way but it would be more efficient to use &lt;code&gt;useReducer&lt;/code&gt; in some complex applications.&lt;/p&gt;

&lt;p&gt;We are going to explore these hooks in detail showing the best hook to use in any given application and how we can convert one of these hooks to use the other. Let’s get started.&lt;/p&gt;

&lt;p&gt;The commonly used state hook – &lt;code&gt;useState&lt;/code&gt;, is a react hook that lets you add a state variable to your component. It is usually written like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const [state, setState] = useState(initialState)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useState&lt;/code&gt; takes in an initialState which can be a string, boolean, number, array, object or function. It returns two values namely:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;state – This is the current state&lt;/li&gt;
&lt;li&gt;setState – This is a function that updates the state.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A simple example looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [country, setCountry] = useState('Nigeria');
const handleClick = () =&amp;gt; {
    setCountry('South Africa');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code snippet is a simple example of the &lt;code&gt;useState&lt;/code&gt; hook and how we can use it to update the state. If the &lt;code&gt;handleClick&lt;/code&gt; function is passed to a button, on clicking the button, the application re-renders to show the update – “South Africa” for the country state variable.&lt;/p&gt;

&lt;h3&gt;
  
  
  What exactly is useReducer?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;useReducer&lt;/code&gt; is a React hook that lets you add a reducer to your component. So, what is a reducer? A reducer is a function that allows us to specify all the state update logic in a single function.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useReducer&lt;/code&gt; takes in two major parameters and an optional third parameter. It returns two values – state and dispatch. The state is the current state and the dispatch is a function that lets you update the state.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const [state, dispatch] = useReducer(reducer, initialState, initFunc?)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Same simple example with &lt;code&gt;useReducer&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const reducer = (state, action) =&amp;gt; {
    switch (action.type) {
        case 'change_country': {
            return {
                country: action.newCountry
            }
        }
        // other cases are written here
        default: {
            return state
        }
    }
}

const [state, dispatch] = useReducer(reducer, {country: 'Nigeria'});

const handleClick = () =&amp;gt; {
dispatch({
    type: 'change_country',
    newCountry: 'South Africa'
})
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An explanation of the above sample code snippet – we invoked our &lt;code&gt;useReducer&lt;/code&gt; which accepts a reducer that contains the logic for updating the state and an initial state of &lt;code&gt;{ country: ‘Nigeria’ }&lt;/code&gt;. We are calling the dispatch function in the click handler; passing in the type of action we want to perform with the value of the next state.&lt;/p&gt;

&lt;h3&gt;
  
  
  Dispatch and Reducer Explained
&lt;/h3&gt;

&lt;p&gt;Dispatch Function: The dispatch function returned by &lt;code&gt;useReducer&lt;/code&gt; lets you update the state to a different value and trigger a re-render. You need to pass the action as the only argument to the dispatch function. An action is usually an object with a type property identifying it and, optionally, other properties with additional information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dispatch({
    type: ‘change_country’,
    // other properties
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A reducer function is declared like the below code snippet. It accepts state, which is the current state and action which updates the state and returns the next state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function reducer(state, action) {
    // state updates are made here
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have successfully updated a state using both &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useReducer&lt;/code&gt;. So, of what use is one hook over the other? We will cover this next in this article.&lt;/p&gt;

&lt;h3&gt;
  
  
  Comparing useState and useReducer
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;useReducer&lt;/code&gt; is similar to &lt;code&gt;useState&lt;/code&gt;. &lt;code&gt;useReducer&lt;/code&gt; enables us to move our state update logic into a single function which is more efficient for larger applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;useState&lt;/code&gt; is simple and easy to set up for smaller applications but when the application gets complex, it becomes difficult to read with many state logic in event handlers. &lt;code&gt;useReducer&lt;/code&gt; proves to be efficient for this use case as it helps organize our state logic in one place.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;useReducer&lt;/code&gt; is easier to debug in a complex application as you can easily find the action that is not dispatched, but with &lt;code&gt;useState&lt;/code&gt;, you would have to look through a lengthy code to identify the error.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Examining the above code sample, using &lt;code&gt;useState&lt;/code&gt; resulted in fewer lines of code. While this is good for smaller applications when the application gets larger, the lines of code also increase. Using &lt;code&gt;useReducer&lt;/code&gt; to separate the logic in a function is a better approach for larger applications.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your application is handling multiple state logic in event handlers, then you should use &lt;code&gt;useReducer&lt;/code&gt; else &lt;code&gt;useState&lt;/code&gt; is fine.&lt;/p&gt;

&lt;h3&gt;
  
  
  How to migrate from useState to useReducer.
&lt;/h3&gt;

&lt;p&gt;We are going to explore an example that uses both &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useReducer&lt;/code&gt;. You will, therefore, see how we can migrate from one to the other. Here is a simple application that gets the user’s &lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt; with a button to add the names to the existing name list and a button to reset the name list.&lt;/p&gt;

&lt;p&gt;Steps to follow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Move from setting state to dispatching actions.&lt;/li&gt;
&lt;li&gt;Write a reducer function.&lt;/li&gt;
&lt;li&gt;Use the reducer from your component.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This contains the &lt;a href="https://codesandbox.io/s/usestate-and-usereducer-hook-example-9lmkm9?file=/src/App.js"&gt;code &lt;/a&gt;sample of our application. To see the implementation of our state update logic using &lt;code&gt;useState&lt;/code&gt;, comment out the FormUsingReducer component in App.js and uncomment the Form component in App.js and vice-versa for &lt;code&gt;useReducer&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  Conclusion
&lt;/h3&gt;

&lt;p&gt;We have explored both &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useReducer&lt;/code&gt; to update state. We also looked at a real live example, when it is preferable to use these hooks and lastly a quick comparison of both. A lot of references are from the React documentation. Check it out &lt;a href="https://react.dev/reference/react"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Understanding the concepts we use and exploring new concepts is critical for growth as developers. I hope you have learned something and you are excited about applying what you have learnt in your next project.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>react</category>
      <category>reacthooks</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>From Installation to Database: How to connect your IoT devices with AWS IoT Core and Timestream using Terraform</title>
      <dc:creator>Augusto Valdivia</dc:creator>
      <pubDate>Tue, 04 Apr 2023 01:52:37 +0000</pubDate>
      <link>https://dev.to/aws-builders/from-installation-to-database-how-to-connect-your-iot-devices-with-aws-iot-core-and-timestream-using-terraform-bb9</link>
      <guid>https://dev.to/aws-builders/from-installation-to-database-how-to-connect-your-iot-devices-with-aws-iot-core-and-timestream-using-terraform-bb9</guid>
      <description>&lt;h3&gt;
  
  
  Welcome back! I'm thrilled to see you here again.
&lt;/h3&gt;

&lt;p&gt;Are you still curious about how to set up your IoT devices and store their data in &lt;strong&gt;AWS&lt;/strong&gt; cloud? I know I am!  &lt;/p&gt;

&lt;p&gt;Whether you're a tech expert or a newbie, don't worry, because I've got your back. In this article, we're going to cover the general overview of installing IoT devices, connecting them with AWS IoT Core, and storing their data in an AWS Timestream database using Infrastructure as Code (IaC). &lt;/p&gt;

&lt;p&gt;I promise this is going to be a fun and exciting ride, so get ready to buckle up and dive in! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hF1Oih7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r14tz9j205xtzws1ssza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hF1Oih7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r14tz9j205xtzws1ssza.png" alt="Connecting with AWS IoT Core" width="64" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Connecting with AWS IoT Core
&lt;/h2&gt;

&lt;p&gt;Before we can connect our devices to AWS IoT Core, we need to get them installed first! Don't worry, the process is straightforward, but it will vary depending on the type of device you're working with. Generally speaking, you'll need to follow these steps:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Choose your device&lt;/strong&gt; - there are tons of IoT devices out there, from simple sensors to complex devices with built-in processing power. Do your research and test out multiple devices to find the one or ones that best fit your needs. You could even use multiple devices for a single project - the possibilities are endless!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Assemble your device&lt;/strong&gt; - this is where the fun begins! Sometimes documentation can be a bit outdated, so make sure to follow the manufacturer's instructions as closely as possible to assemble your device.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Connect your device to the internet&lt;/strong&gt; - in today's world, it's easy to connect your device to the internet using Wi-Fi, Ethernet, or cellular data. In Toronto, Canada, all the major telecommunication providers offer these types of services. Just be sure to read the manufacturer's instructions and ensure that your device has the necessary connectivity features for best performance.&lt;/p&gt;

&lt;p&gt;Now that we've finished the initial setup process, it's time to connect our devices to AWS IoT Core and get things rolling!&lt;/p&gt;

&lt;p&gt;To start, we'll need to create an AWS IoT thing that will generate an X.509 certificate, public key and private key, which you will need to download and save securely. You will then need to configure your device to use this certificate and key to authenticate with AWS IoT Core. Don't worry if these terms sound foreign to you. You can always read more about them in my &lt;a href="https://dev.to/aws-builders/from-zero-to-hero-a-beginners-guide-to-aws-iot-things-certificates-policies-rules-and-topics-5632"&gt;previous blog post&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Next, we'll create an IoT document policy that enables secure communication between our IoT devices and AWS IoT Core. With this policy in place, we'll be able to send and receive data without any issues.&lt;/p&gt;

&lt;p&gt;Finally, once we've deployed our AWS IoT thing, collected the three certificates, and attached the policy to the thing, it's time to connect both our IoT devices and AWS IoT core. The devices will need the private certificate, ca-certificate, and the AWS IoT Core endpoint to establish a connection.&lt;/p&gt;

&lt;p&gt;Are you ready to dive deeper into the world of Terraform? Let's get started!&lt;/p&gt;

&lt;p&gt;This code block below will deploy all the resources we mentioned earlier. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Get ready to see some magic happen!&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#AWS-IoT-Thing
resource "aws_iot_thing" "iot_core" {
  name = "your-iot-core-thing"
}


#AWS-IoT-certificates
resource "aws_iot_certificate" "iot_certificate" {
  active = true
}

#AWS-IoT-certificates-attachment
resource "aws_iot_thing_principal_attachment" "iot_attachment" {
  principal = aws_iot_certificate.iot_certificate.arn
  thing = aws_iot_thing.iot_core.name
}

#AWS-IoT-policy
resource "aws_iam_policy" "iot_timestream_policy" {
  name = "iot-timestream-policy"
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "timestream:WriteRecords"
        ]
        Resource = [
          "${aws_timestreamwrite_database.timestream_database.arn}"
        ]
      }
    ]
  })
}

#AWS-IoT-policy-Attachment
resource "aws_iot_policy_attachment" "iot_policy_attachment" {
  policy = aws_iam_policy.iot_timestream_policy.name
  target = aws_iot_certificate.iot_certificate.arn
}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MjvirTZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/997usbrq3wwhfozst3s3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MjvirTZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/997usbrq3wwhfozst3s3.png" alt="rule" width="64" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Creating an IoT Rule
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;resource "aws_iot_topic_rule" "iot_rule" {
  name = "myiotrule"
  sql = "SELECT * FROM 'iot-core-topic'"
  sql_version = "2016-03-23"
  enabled     = true
  description = "Send data from the AWS IoT Core to AWS Timestream"

timestream {
      database_name = aws_timestreamwrite_database.timestream_database.database_name

        dimension {}

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j1ON2RAc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mu1jginv8kvukz711bv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j1ON2RAc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mu1jginv8kvukz711bv.png" alt="Database" width="64" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Creating an AWS Timestream Database
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;resource "aws_timestreamwrite_database" "timestream_database" {
  database_name = "timestream-database-iot"

  tags = {
    Name = "timestream-database-iot"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are not familiar with Timestream Database you can always read more about it in my &lt;a href="https://dev.to/aws-builders/amazon-timestream-h42"&gt;previous blog post&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Please note that the above code is just an example and you should modify it to fit your security regulations and specific use case.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PxAHx7SZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq8grlwdobay22u5iuj3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PxAHx7SZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq8grlwdobay22u5iuj3.png" alt="test" width="64" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Testing-Time
&lt;/h2&gt;

&lt;p&gt;In this section, you'll get some hands-on experience collecting and storing data in the AWS cloud. I've created a simple Bash script that generates random temperature and humidity values and publishes them to an IoT topic using the AWS CLI V2. This script was inspired by this great &lt;a href="https://aws.amazon.com/blogs/iot/integrating-iot-data-with-your-data-lake-with-new-aws-iot-analytics-features/"&gt;article&lt;/a&gt;, so make sure you have the right CLI version installed!&lt;/p&gt;

&lt;p&gt;You might be asking yourself, How do you run this Bash script? Don't worry it's easy! In the CLI, you just need to paste this command: &lt;code&gt;sh sensors.sh&lt;/code&gt;, and hit &lt;code&gt;enter&lt;/code&gt;. You should see random data being generated, as shown in the screenshot below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Publishing data 1/10 to AWS IoT topic iot-core-topic:
temperature: 87
humidity: 86
Publishing data 2/10 to AWS IoT topic iot-core-topic:
temperature: 20
humidity: 73
Publishing data 3/10 to AWS IoT topic iot-core-topic:
temperature: 39
humidity: 97
Publishing data 4/10 to AWS IoT topic iot-core-topic:
temperature: 68
humidity: 43
Publishing data 5/10 to AWS IoT topic iot-core-topic:
temperature: 55
humidity: 16
Publishing data 6/10 to AWS IoT topic iot-core-topic:
temperature: 67
humidity: 87
Publishing data 7/10 to AWS IoT topic iot-core-topic:
temperature: -19
humidity: 62
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are seeing the same result in your CLI, then you should be ready to see the data coming into the AWS IoT Core MQTT test client. See the screenshot below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PW-gyZfO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wy35jk1iofoaihuzo3t7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PW-gyZfO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wy35jk1iofoaihuzo3t7.png" alt="MQTT" width="880" height="533"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We still have one more resource to check: the AWS Timestream Database. Now that we have confirmed that we are receiving data through the MQTT connection, we should be able to query and analyze the data in our AWS Timestream Database table using simple SQL query such as &lt;code&gt;SELECT * FROM "timestream-database-iot"."timestream-database-iot-table"&lt;/code&gt;, as shown in the screenshot below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xzoslo0M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cze3hl95kcbfv0w3u8e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xzoslo0M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cze3hl95kcbfv0w3u8e.png" alt="db" width="880" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the repository and instructions on how to successfully deploy each database in this series of articles, as well as how to complete the AWS IoT project portion of the series, &lt;a href="https://github.com/ValAug/aws-databases-terraform"&gt;right here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  
  
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations! You have successfully learned a general overview of how to install IoT devices, connect them with AWS IoT Core, and push incoming data into an AWS Timestream database. With AWS IoT Core, you can easily manage and secure your IoT devices, and with AWS Timestream, you can store and analyze time-stamped data. I hope this guide has been helpful and that you're excited to start your own IoT project. Don't forget to share your experiences with everyone and let me know what you've built!&lt;/p&gt;

</description>
      <category>awsiot</category>
      <category>awscommunitybuilders</category>
      <category>awsbigdata</category>
      <category>terraform</category>
    </item>
    <item>
      <title>Explaining Algorithms to my girlfriend - Binary Search</title>
      <dc:creator>Daniel Lima </dc:creator>
      <pubDate>Tue, 04 Apr 2023 01:45:05 +0000</pubDate>
      <link>https://dev.to/daniellimae/explain-algorithms-binary-search-2e0g</link>
      <guid>https://dev.to/daniellimae/explain-algorithms-binary-search-2e0g</guid>
      <description>&lt;p&gt;The purpose of this explanation is to help solidify an idea in my mind. To make sure it's easy to understand, I will explain it in a way that my girlfriend, Rafaella, who is very intelligent but not a fan of math, can comprehend. If you also find this explanation helpful, then that's great!&lt;/p&gt;

&lt;h1&gt;
  
  
  What is a Algorithm ?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8tTxQzGH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m46vd9fgwzj4bbolqf74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8tTxQzGH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m46vd9fgwzj4bbolqf74.png" alt="Image description" width="880" height="352"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imagine you're a chicken trying to cross a busy street to get to the other side. You don't want to get hit by a car, so you need to follow a set of steps or rules, just like an algorithm.&lt;/p&gt;

&lt;p&gt;First, you need to look both ways to make sure there are no cars coming. Then, you need to strut your stuff across the street quickly, but not too quickly, while avoiding obstacles like pedestrians and stray cats. Finally, you need to celebrate your success on the other side of the street by doing the chicken dance!&lt;/p&gt;

&lt;p&gt;Just like how following these steps can help you safely cross the street as a chicken, algorithms help computers solve problems and perform tasks efficiently by following a set of instructions or steps. The steps in an algorithm are like the rules that the chicken needs to follow to safely cross the street, while avoiding obstacles and celebrating their success on the other side.&lt;/p&gt;

&lt;h1&gt;
  
  
  Binary search ? 🤔
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---SK_Nehe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjigyw5ddynrfexcbvmz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---SK_Nehe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjigyw5ddynrfexcbvmz.png" alt="Image description" width="785" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's start explain the "search" part, and after you will understand the "binary".&lt;/p&gt;

&lt;p&gt;Imagine you are looking for a Nachos 🌮 recipe in a book with hundreds of recipes. You know the name of the recipe ( nachos ), but you don't know which page it's on. You could flip through every page of the book, but that would take a long time. Instead, you can use a binary search algorithm to find the recipe quickly.&lt;/p&gt;

&lt;p&gt;First, you would start by opening the book to the middle and looking at the title of the recipe on that page. If it's not the recipe you're looking for, you can use the alphabetical order of the recipes to determine whether you need to search the pages before or after the middle page. You would then repeat this process, dividing the remaining pages in half and searching the appropriate section, until you find the recipe you're looking for.&lt;/p&gt;

&lt;p&gt;Just like how the BINARY search algorithm helps you quickly locate a recipe in a book by dividing the search area in half and checking if the recipe is in the upper or lower half, it can also help computers find data efficiently by dividing a large dataset in half and checking whether the target data is in the upper or lower half. The binary search algorithm is like a skilled chef who knows how to find a recipe quickly by using the alphabetical order of the recipes and dividing the pages into smaller sections!&lt;/p&gt;

&lt;h1&gt;
  
  
  Let's apply on software contexts
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4kwr6Kfl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/resli7bqritfo3j18zof.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4kwr6Kfl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/resli7bqritfo3j18zof.png" alt="Image description" width="876" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imagine you are trying to login at instagram. Every time you do that, the instagram must verify if you really have a account.&lt;br&gt;
For that, the insta needs to search your name ( or @ ) at a database ( the database of our Nachos recipe are the Book of Recipes ) .&lt;br&gt;
In my girlfriend case ( @rafaLindaDemais ) the instagram could start looking for the A letter and up the list until found her account.&lt;/p&gt;

&lt;p&gt;But, make more sense if the we start to looking at the half of your database. &lt;/p&gt;

&lt;p&gt;By dividing the search area in half with each step, you can quickly narrow down your search and find the recipe you're looking for much more efficiently. In the same way, when Instagram searches for your account, it can use binary search to quickly find your account in their database by dividing the search area in half with each step, rather than searching through every account in the database one by one.&lt;/p&gt;

&lt;p&gt;Of course instagram have more ways to do that, but this is a good start for you implementing a better searching optimization at your software and life :)&lt;/p&gt;




&lt;p&gt;Hope this post can be helpful!&lt;br&gt;
For some feedback or more content, follow me on &lt;a href="https://twitter.com/daniellimae"&gt;twitter&lt;/a&gt; or &lt;a href="https://github.com/bolodissenoura"&gt;github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Building Robust Backend APIs with State Machines: A Comprehensive Guide</title>
      <dc:creator>Mohsin Ali</dc:creator>
      <pubDate>Tue, 04 Apr 2023 00:40:09 +0000</pubDate>
      <link>https://dev.to/mohsinalipro/building-robust-backend-apis-with-state-machines-a-comprehensive-guide-2g37</link>
      <guid>https://dev.to/mohsinalipro/building-robust-backend-apis-with-state-machines-a-comprehensive-guide-2g37</guid>
      <description>&lt;h1&gt;
  
  
  &lt;strong&gt;Introduction&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;As a backend developer, I have come to appreciate the importance of state machines in building robust and scalable systems. State machines are a powerful tool for modeling complex business logic and automating transitions between states. In this blog post, I will explain what state machines are, their benefits for backend development, and how to use them to solve common problems.&lt;/p&gt;

&lt;h1&gt;
  
  
  What are State Machines?
&lt;/h1&gt;

&lt;p&gt;A state machine is a mathematical model used to describe the behavior of a system. It consists of a set of states, transitions between these states, and actions associated with these transitions. At any given time, the system is in one of the defined states, and transitions are triggered by specific events or conditions.&lt;/p&gt;

&lt;p&gt;State machines are often used in software development to model complex workflows or business logic. They provide a clear and structured way of defining the behavior of a system, making it easier to reason about, debug, and maintain.&lt;/p&gt;

&lt;h1&gt;
  
  
  Benefits of Using State Machines for Backend Development
&lt;/h1&gt;

&lt;p&gt;There are several benefits of using state machines for backend development:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Simplicity:&lt;/strong&gt; State machines simplify the design and implementation of complex workflows. They provide a clear and structured way of defining the behavior of a system, making it easier to understand and maintain.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scalability:&lt;/strong&gt; State machines are highly scalable and can handle large amounts of data and complex logic. They can also be easily integrated with other systems and services.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reliability:&lt;/strong&gt; State machines help ensure the reliability of a system by enforcing constraints and ensuring that only valid transitions are allowed. This can prevent errors and reduce the risk of system failures.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Flexibility:&lt;/strong&gt; State machines are flexible and can adapt to changing business requirements. They can be easily updated or modified without affecting the rest of the system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  
  
  Overview of What Will Be Covered in the Post
&lt;/h1&gt;

&lt;p&gt;In the rest of this post, I will explain how to use state machines to solve common backend development problems. Specifically, We will cover the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Defining states and transitions&lt;/li&gt;
&lt;li&gt;Actions associated with transitions&lt;/li&gt;
&lt;li&gt;Validating transitions&lt;/li&gt;
&lt;li&gt;Persisting state machine data&lt;/li&gt;
&lt;li&gt;Testing state machines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the end of this post, you should have a good understanding of how to use state machines to build robust and scalable backend systems.&lt;/p&gt;

&lt;h1&gt;
  
  
  Designing the State Machine
&lt;/h1&gt;

&lt;p&gt;As I mentioned earlier, state machines are made up of states, transitions, and events. When designing a state machine for our backend system, We need to first identify all the different states that our system can be in. For example, in a user authentication system, we might have states such as "logged out," "logged in," and "forgot password."&lt;/p&gt;

&lt;p&gt;Once we have identified all the states, we need to define the events that will trigger transitions between those states. In our authentication system, events could include "user submits login credentials," "user clicks logout button," or "user requests password reset."&lt;/p&gt;

&lt;p&gt;With states and events defined, we can now diagram our state machine. This is typically done using a visual representation, such as a flowchart or state diagram. This diagram will show all the states, transitions, and events in a clear and organized manner, making it easier for us to understand and implement our state machine in code.&lt;/p&gt;

&lt;p&gt;When designing a state machine, it's important to keep in mind the specific needs and requirements of our backend system. By carefully considering all the states, transitions, and events, we can create a state machine that accurately reflects the behavior of our system and provides the necessary functionality for our users.&lt;/p&gt;

&lt;h2&gt;
  
  
  Designing the State Machine with Visual Editor
&lt;/h2&gt;

&lt;p&gt;To further simplify the process of designing and diagramming state machines, there are visual editors available that allow us to create and modify state machines using a graphical interface. One popular tool is the &lt;a href="https://xstate.js.org/viz/"&gt;XState Visualizer&lt;/a&gt;, which provides an easy-to-use interface for designing state machines.&lt;/p&gt;

&lt;p&gt;With XState Visualizer, we can create and edit states and transitions using a drag-and-drop interface. We can also define events and actions for each state and transition, making it easier to test and debug our state machine.&lt;/p&gt;

&lt;p&gt;Using a visual editor can be especially useful for complex state machines, where the diagram can quickly become difficult to manage and understand. By using a visual editor, we can ensure that our state machine is well-designed and meets the specific needs of our backend system.&lt;/p&gt;

&lt;h1&gt;
  
  
  Implementing the State Machine
&lt;/h1&gt;

&lt;p&gt;Now that we have designed the state machine, it's time to implement it. Choosing the right framework for state machines is crucial for the success of your project. There are several frameworks available in different programming languages that can be used for implementing state machines. Some of the popular ones include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Python&lt;/strong&gt;: PyTransitions, Automat&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Java&lt;/strong&gt;: StateMachineFramework, EasyFlow&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;C#&lt;/strong&gt;: Stateless, Automatonymous&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;JavaScript&lt;/strong&gt;: xstate, javascript-state-machine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the purpose of this post, we will be using the xstate library for implementing our state machine in Node.js.&lt;/p&gt;

&lt;p&gt;We'll start by installing &lt;code&gt;xstate&lt;/code&gt; using npm:&lt;/p&gt;

&lt;p&gt;npm install xstate&lt;/p&gt;

&lt;p&gt;Once we have &lt;code&gt;xstate&lt;/code&gt; installed. The first step is to set up the state machine by defining the initial state and the state transitions. Xstate provides a simple syntax for defining state machines using a JSON object. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signUpStateMachine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;signup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;idle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;states&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;idle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;SIGNUP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pendingVerification&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;pendingVerification&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;VERIFICATION_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;VERIFICATION_FAILURE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;verificationFailed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;verificationFailed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;SIGNUP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pendingVerification&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;final&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; property is a unique identifier for the state machine. The &lt;code&gt;initial&lt;/code&gt; property specifies the initial state of the machine, which in this case is &lt;code&gt;idle&lt;/code&gt;. The &lt;code&gt;states&lt;/code&gt; property contains all the possible states of the machine and their corresponding transitions.&lt;/p&gt;

&lt;p&gt;Once the state machine is set up, we can write code to handle state transitions. Xstate provides a &lt;code&gt;Machine&lt;/code&gt; function that creates an instance of the state machine. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Machine&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xstate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signUpMachine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Machine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;signUpStateMachine&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now use this &lt;code&gt;signUpMachine&lt;/code&gt; instance to transition between different states. Xstate provides a &lt;code&gt;send&lt;/code&gt; function that can be used to trigger events and transition between states. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;signUpMachine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SIGNUP&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 'pendingVerification'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, we have triggered the &lt;code&gt;SIGNUP&lt;/code&gt; event, which transitions the machine from the &lt;code&gt;idle&lt;/code&gt; state to the &lt;code&gt;pendingVerification&lt;/code&gt; state. The &lt;code&gt;send&lt;/code&gt; function returns an object that contains the current state of the machine (&lt;code&gt;result.value&lt;/code&gt;).&lt;/p&gt;

&lt;h1&gt;
  
  
  Testing the State Machine
&lt;/h1&gt;

&lt;p&gt;Testing is a critical part of software development, and the state machine is no exception. In this section, We will discuss the different types of testing that can be performed on a state machine to ensure its correctness and reliability.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Unit Testing: Unit tests are designed to test individual functions or methods of the state machine in isolation. These tests are important for ensuring that each function of the state machine works as intended and that the state transitions occur as expected.&lt;/li&gt;
&lt;li&gt;Integration Testing: Integration testing is performed to ensure that the state machine works correctly with other parts of the backend system. This type of testing is important for ensuring that the state machine interacts properly with the database, messaging queues, or other systems that the backend relies on.&lt;/li&gt;
&lt;li&gt;Performance Testing: Performance testing is done to determine how well the state machine performs under various conditions, such as high traffic or a large number of concurrent users. This type of testing can help identify potential bottlenecks or issues with the state machine that may need to be addressed.&lt;/li&gt;
&lt;li&gt;Automated Testing: Automated testing can help streamline the testing process by automatically running tests and checking for errors. This type of testing is particularly useful for regression testing, where changes to the state machine are checked against existing test cases to ensure that they do not introduce new bugs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By performing a combination of these tests, we can ensure that the state machine is working as intended and that any issues are caught early on in the development process.&lt;/p&gt;

&lt;h1&gt;
  
  
  Advanced Techniques for State Machines in Backend Development
&lt;/h1&gt;

&lt;p&gt;As state machines become more complex, there are several techniques to handle concurrency and multiple requests. One approach is to use optimistic locking, which allows multiple requests to access the state machine at the same time, but only one request can update the state at a time. This technique prevents data inconsistency and race conditions.&lt;/p&gt;

&lt;p&gt;Another advanced technique is using state machines for complex workflows. In a workflow, there are multiple states and transitions that must be tracked, and state machines provide a clear and organized way to handle these states and transitions. State machines can also be used to enforce business rules and ensure that the workflow progresses as intended.&lt;/p&gt;

&lt;p&gt;Incorporating error handling in the state machine is another advanced technique. When an error occurs, the state machine should handle it gracefully and transition to an appropriate state. Error handling can also involve logging errors, notifying users or developers, and retrying failed actions.&lt;/p&gt;

&lt;h1&gt;
  
  
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this blog post, we've discussed the benefits of using state machines in backend development, and explored how to design, implement, and test a state machine in the backend. We've also looked at some advanced techniques for using state machines in complex scenarios.&lt;/p&gt;

&lt;p&gt;State machines provide a powerful way to model complex systems and workflows in a clear and concise way. By using state machines, we can avoid the pitfalls of spaghetti code and ensure that our backend services are scalable, reliable, and maintainable.&lt;/p&gt;

&lt;p&gt;In the future, we expect to see even more possibilities for using state machines in backend development. As systems become more complex and distributed, state machines can help us to manage the complexity and ensure that our systems are robust and resilient.&lt;/p&gt;

&lt;p&gt;If you're working on a backend system or service, we highly recommend considering the use of state machines to simplify and streamline your code. With the right tools and techniques, state machines can help you to build better software and deliver more value to your users.&lt;/p&gt;

</description>
      <category>statemachines</category>
      <category>backenddevelopment</category>
      <category>softwareengineering</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
